<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zj4sun.github.io/</id>
    <title>zJ4sun</title>
    <updated>2024-12-30T22:54:30.194Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zj4sun.github.io/"/>
    <link rel="self" href="https://zj4sun.github.io/atom.xml"/>
    <subtitle>行胜于言</subtitle>
    <logo>https://zj4sun.github.io/images/avatar.png</logo>
    <icon>https://zj4sun.github.io/favicon.ico</icon>
    <rights>All rights reserved 2024, zJ4sun</rights>
    <entry>
        <title type="html"><![CDATA[2024年年度总结]]></title>
        <id>https://zj4sun.github.io/post/2024-nian-nian-zhong-zong-jie/</id>
        <link href="https://zj4sun.github.io/post/2024-nian-nian-zhong-zong-jie/">
        </link>
        <updated>2024-12-30T22:46:36.000Z</updated>
        <content type="html"><![CDATA[<p>又是一年冬来临，2024年已接近尾声。这年诸多遗憾，激动，无奈交织倒是饶有趣味。回想一年前我曾说2024年我将迎来人生中一次重大的转折，我需要把握，现在来聊聊吧。</p>
<h2 id="去年目标">去年目标</h2>
<p>首先先来回答去年留下的五点目标：</p>
<ul>
<li>关于实习</li>
</ul>
<p>​		现在回看这份实习我认为我是不满意的。从年初开始便决定暑假肯定不会回家，而是一定会在上班，所以便是早早的从4月开始准备，期间大概面了各种大大小小的10多场面试最后选择了一家网络安全公司实习，公司在北京和成都都有公司在六月还未放假时变在成都这边入职了，后边7月放假又去北京实习了4个月。这段时间对我来说有收获也有遗憾，无论是从学习和发展以及个人心理角度最后还是认为继续呆下去不太合适，还是选择离开。这点目标算未完成吧</p>
<ul>
<li>对安全开发有一些研究</li>
</ul>
<p>​	这点不知如何去界定了，对于安全开发会看这一年貌似并未太深入，倒是对一些开发有一些实践，在公司的实习的时候对于爬虫和逆向这部分又深入的学习了一下，还通过这个去尝试接了一些项目虽然没有多少钱，权当鼓励吧。这点算达标吧，毕竟当时也时比较宽泛</p>
<ul>
<li>建立起长期记账习惯</li>
</ul>
<p>​	这点倒是没有什么说的，2024年我确实做到了全年记账，特别是北漂那段时间基本上事无巨细每一笔开销都进行了记录。</p>
<ul>
<li>年跑量有800km</li>
</ul>
<p>​	这点倒是有着不少差距，截至本文统计时，2024年我一共只跑了215km。当初在设立目标时没有想到今年会有诸多事情，新年刚过就做了一个手术，从1月到4月都在恢复，都不能出汗，后边出去工作后坚持开始恢复，到了下半年开始准备秋招当时晚上经常在公司待到很晚，也没有流出太多时间去运动，早在7月时通过估算便知道这个目标今年时肯定无法完成了。</p>
<ul>
<li>好好的爱自己和家人</li>
</ul>
<p>​	8月一位老人永远的离开了我，心中有诸多遗憾与愧疚，但已无法展露。</p>
<h2 id="年内回顾">年内回顾</h2>
<p>这一年与我而言是很丰富，但是对我来说确也有诸多不足。今年我给自己定下的年度关键词变为“探索家”。从对知识的探索、对爱情的思考、对工作的体验，到对个人情感的反思和对未来方向的探索，这一年充满了成长和探索的元素。我也在不断尝试新事物、面对挑战、反思自我，以及在职业和情感上做出选择。</p>
<h3 id="关于学习">关于学习</h3>
<p>今年我算是我专业学习最集中的一年，对于很多知识和技术也是进行了学习，特别是在公司实习的那段时间也是经可能在学习新技能虽然并没有能够在今年帮助改变一些结果。78月我重新开始keep锻炼，开始按照视频课程开始锻炼。我也开始尝试看书，以前对于书籍一直不太感兴趣，可能现在很多碎片化的信息可能不能满足我的需求，在后续可能对于这方面会投入更多时间和安排去学习。</p>
<h3 id="关于爱情的思考">关于爱情的思考</h3>
<p>上半年我记录好几次关于爱情的一些笔记，也袒露自己好像遇到那个对的人，但显然这个感觉并没有完全对，她是一个对的人，但好像不是我对的人，我们并不合适。在那段时间我暴露出诸多问题 ，给这段关系带来很多负面进展，显然自己目前不适合谈恋爱，如果不去改变一些问题，后续不过是在周期律中反复循环。关于这一部分再次暂不多讨论。</p>
<h3 id="关于自我">关于自我</h3>
<p>今年我学习有了一些成长，能够独自去面对一些事情，有了一些接触行业的实际经验。自己好像有了一些在社会生存的能力，但是这远远不够。同时今年也是在继续”行万里路“，今年去见识独特的山城风光，感受深厚的京城韵味。同时对于这个待了三年的蓉城也有不一样情感。明年或许会将目光投向江南地区，去走进徽派民居，走进苏州园林。这些或许都是收获了吧。</p>
<h3 id="总结与展望">总结与展望</h3>
<p>这一年，我经历了从学生到职场新人的转变，从家乡的温暖到大城市的冷漠，从健康的挑战到职业的迷茫。每一个月，每一日，都记录着我的成长和变化。而我将继续记录，记录下我的成长和改变。面对新的一年，我充满期待。在这一年我将大学毕业，届时会更加紧密的拥抱这个社会，拥抱这个时代。在这里便留下明年的目标吧：</p>
<ul>
<li>自信（一年后能够坦荡的说出我比现在更好）</li>
<li>加强与家人的联系（去共同讨论未来的规划）</li>
<li>积极尝试职业探索与学习（尝试新职业谋求新发展）</li>
<li>健康与运动（坚持每周至少有3小时的运动，尝试拓展新的运动方式）</li>
<li>跳出舒适圈（勇敢的去尝试新的事务）</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[威胁情报]]></title>
        <id>https://zj4sun.github.io/post/wei-xie-qing-bao/</id>
        <link href="https://zj4sun.github.io/post/wei-xie-qing-bao/">
        </link>
        <updated>2024-11-13T16:26:07.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>对于威胁情报这一块做一个系统的性的认知学习，参考多位师傅的文章整理汇总。防止学习路径走偏</p>
<h2 id="正文">正文</h2>
<h3 id="安全威胁情报简述">安全威胁情报简述</h3>
<p>在讲安全威胁情报之前先来谈谈消息和情报</p>
<p><strong>消息</strong>：指的是未经筛选、分析或验证的信息片段。它只是原始的数据或事实，可能来源广泛，可靠性也不确定。例如：某网站可能存在漏洞、某个IP地址进行了访问等。</p>
<p><strong>情报</strong>：是经过分析和验证的消息或信息。情报需要经过筛选、归纳、分析，提供有用的背景和细节，用于帮助决策。例如，分析某些攻击行为的模式后得出攻击者的动机和目标，便形成了有价值的情报。</p>
<p>那么显然情报是更高维度的消息，是基于客观事实的证据的高维度消息。那么我们可以说判断出</p>
<p>1.漏洞情报不是威胁情报。威胁企业的，漏洞只是一部分。漏洞知己，威胁知彼。</p>
<p>2.威胁信息不等于威胁情报。 威胁情报，不仅是收集，还需要分析。情报是已经处理和分析的。</p>
<p>3.威胁情报不等于信息收集。信息收集只是威胁情报的第一部分。情报是对企业有意义的。</p>
<h4 id="威胁情报的5w1h">威胁情报的5W1H</h4>
<p>威胁情报详细说明了对手如何攻陷和破坏系统，以便防御者可以更好地准备在事前、事中和事后进行预防、检测和响应攻击者的行为。威胁情报通过使用多种数据（5W1H）来生成关于对手的知识，从而实现这一目标，例如：</p>
<ul>
<li>对手是谁（Who），包括威胁行为体，赞助商和雇主</li>
<li>对手使用什么（What），包括他们的能力和基础设施</li>
<li>对手的行动时（When），确定行动的时间表和规律</li>
<li>对手的目的（Why），包括他们的动机和意图</li>
<li>对手的目标行业和地理区域（Where），详细说明行业，垂直行业和地理区域</li>
<li>对手如何运作（How），专注于他们的行为和规律</li>
</ul>
<p>画像：根据用户社会属性、生活习惯和消费行为等信息而抽象出的一个<strong>标签化</strong>的用户模型。</p>
<p>攻击源画像：描述攻击源的基础设施、技术风格、惯用手法等标识。</p>
<figure data-type="image" tabindex="1"><img src="%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5.assets/20200211091125.png" alt="20200211091125" loading="lazy"></figure>
<h3 id="安全数据分析">安全数据分析</h3>
<pre><code>从数据中提取知识，辅助解决安全问题
</code></pre>
<p>对于黑灰产的分析，会用到数据分析相关的知识。从数据获取——数据预处理——数据整合——数据分析——数据可视化/形成报告。在风控这块，最后能还原攻击特征，甚至写一些自动化监测、分析的脚本，最后能将这些特征加入风控规则内。</p>
<h4 id="总体的流程">总体的流程</h4>
<figure data-type="image" tabindex="2"><img src="%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5.assets/20200308134324.png" alt="img" loading="lazy"></figure>
<h4 id="数据取样">数据取样</h4>
<ul>
<li>关键词取样</li>
<li>根据特定的<strong>关键词及关键词组合</strong>，从全集数据中提取与特定分析对象或特定分析场景有关的数据子集</li>
<li>主要用于<strong>数据统计或趋势分析</strong></li>
<li>相似度采样</li>
<li>根据文本或样本数据的相似度，从全集数据中提取具有<strong>较高相似度的数据子集</strong></li>
<li>主要用于<strong>数据分类统计或案例分析</strong></li>
<li>随机采样</li>
<li>对未知类型或内容数据进行<strong>简单随机采样</strong>，抽样比例根据具体的分析场景决定</li>
<li>主要用于<strong>情报线索发现或关键词校验</strong></li>
<li>分层采样</li>
<li>对已知工具/事件数据<strong>按既定的标签规则分为若干子集</strong>，对每个子集中的数据<strong>随机抽取部分数据</strong>进行分析，抽样比例根据具体分析场景决定</li>
<li>主要用于<strong>案例分析或关键词校验</strong></li>
<li>人工经验判断</li>
<li>受限于数据获取的渠道、数据本身的变化、抽样概率的限制及样本噪点的影响，需要采取人工经验判断的方式进行修正</li>
</ul>
<h4 id="万能溯源">万能溯源</h4>
<ul>
<li>对任意IP进行分析</li>
<li>分析统计流量</li>
<li>分析访问的来源</li>
<li>渐进地分析流量的组成</li>
<li>地图挖掘（根据流量的不同地区，选择不同的挖掘力度）</li>
</ul>
<h4 id="聚类分析">聚类分析</h4>
<h5 id="定义">定义</h5>
<blockquote>
<p>聚类分析是根据在数据中发现的描述对象及其关系的信息，<strong>将数据对象分组</strong>。</p>
<p>目的是，组内的对象相互之间是相似的（相关的），而不同组中的对象是不同的（不相关的）。组内相似性越大，组间差距越大，说明聚类效果越好。</p>
</blockquote>
<p>例如，在实际过程中，分析灰黑产的流程和工具，对被攻击的接口请求进行特征汇总。使用聚类分析的方法，将正常请求和恶意请求进行分组汇总。</p>
<blockquote>
<p>聚类效果的好坏依赖于两个因素：</p>
<p><strong>1.衡量距离的方法（distance measurement）</strong></p>
<p>2.<strong>聚类算法（algorithm）</strong></p>
</blockquote>
<h4 id="交叉分析">交叉分析</h4>
<ul>
<li>研究黑灰产产业链特征，对比核心业务的产业链特征，进行交叉分析（总结产业链中角色<strong>交叉</strong>衍生产业链的上游，并对上游人员监控）</li>
<li>批量行为都是有迹可循的，可以在在设备信息、注册信息重合度、 恶意用户的行为数据等方面，进行多维度的判断</li>
</ul>
<h4 id="告警筛选">告警筛选</h4>
<p>安全运营的一项工作就是要进行告警监控，随着安全行业的发展，各种安全产品层出不穷，产生的海量数据对于人力的要求越来越高。但大家都知道，攻防对抗本质上是成本的对抗，这种海量的告警虽然有助于我们掌握安全态势，但不利于我们实际研判。这也是一个博弈的关系，那最好的一个情况，就是用最低数量的告警去精准地覆盖最全的安全事件。</p>
<h5 id="传统方法">传统方法</h5>
<blockquote>
<ul>
<li>风险筛选法：关注高风险等级的告警</li>
<li>规则筛选法：关注特定防护规则产生的告警</li>
<li>目标筛选法：关注关键资产相关的告警</li>
<li>失陷筛选法：关注攻击源为内网主机的告警</li>
</ul>
</blockquote>
<h5 id="前沿技术">前沿技术</h5>
<blockquote>
<ul>
<li>攻击链筛选法：设法将告警对应到标准攻击步骤，关注构成攻击链的告警</li>
<li>威胁情报筛选法：利用云端共享信息，关注恶意IP相关的告警</li>
<li>异常检测筛选法：关注罕见类型、罕见端口等在统计分布中孤立/离群的告警</li>
</ul>
</blockquote>
<p>关于异常检测筛选法，本质上是一种对安全能力依赖很小的方法，只要从正常中找到异常就可以，不管是什么数据。但理想很丰满，现实很骨感。由于业务、网络本身有着很多复杂的、独特的情况，加上真正有价值的高危险告警本身很稀有，导致精准识别高风险非常困难。</p>
<p>从成本上考虑，使用机器学习、数据分析算法去进行异常检测，我们的目的是提高检测效率，但通常来说，有监督的学习方式对于海量的数据来说，也来了大量的特征工程工作量</p>
<h5 id="完善思路">完善思路</h5>
<p><strong>1、需要引入数据分析方法：</strong></p>
<p>a)信息处理过程存在高度抽象，难以直接定义处理逻辑，需要通过机器学习来找出其中的关联；</p>
<p>b)考虑告警筛选问题的原始需求，模型输入应为原始告警，输出应为重要性分值/分类。</p>
<p><strong>2、需要将告警载荷或原始流量内容纳入模型输入</strong>：</p>
<p>a)但告警载荷通常是二进制流数据，没有统一结构，且目前尚不明确告警载荷中的具体哪些成分能够真正反映告警重要程度；</p>
<p>b)需要一种广泛的特征提取方法，将二进制流数据转换为模型可用的特征输入。</p>
<p><strong>3、需要人类专家的参与：</strong></p>
<p>a)真实环境中的信息安全事件可遇而不可求，真阳性样本非常稀缺；</p>
<p>b)不同漏洞在不同场景下的利用方法千变万化，靶场模拟效果很难保证；</p>
<p>c)需要设计一种方式，让模型能够从人类专家那里得到一些标注、反馈、或者其它类型的关键知识。</p>
<h3 id="tips">tips：</h3>
<p>对于安全事件的分析总体来说还是三个阶段：特征——模型——分析。在这个里面特征和模型能帮助我们把人工经验转化为了机器脚本去执行。但模型偏向于的单个能力的检查。比如模型能检查钓鱼邮件行为，但却不能梳理出一个APT事件。因为对于模型，我们的定义是让其做好特征检查做不到的事情，但没有要求它能到一个完整事件的梳理。</p>
<p>同时在这个过程中我们也不要用局限的眼光看待这个事，而是一种大局观，比如将多个事件整合起来，产生出知识。具体的展现形式有之前提到的同源分析，事件归并等等</p>
<pre><code>同源分析
事件归并
攻击评估
攻击者画像
攻击者能力
攻击者行为
TTPs（技战术组合）提炼
威胁趋势、预测
威胁狩猎
</code></pre>
<h2 id="总结">总结</h2>
<h2 id="references">References</h2>
<ul>
<li>https://wiki.y1ng.org/</li>
<li>https://wiki.y1ng.org/0x4_%E5%AE%89%E5%85%A8%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/4xD_%E5%AE%89%E5%85%A8%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99%E6%95%B4%E5%90%88/****</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2024年第四季度总结]]></title>
        <id>https://zj4sun.github.io/post/2024-nian-di-si-ji-du-zong-jie/</id>
        <link href="https://zj4sun.github.io/post/2024-nian-di-si-ji-du-zong-jie/">
        </link>
        <updated>2024-11-12T11:46:45.000Z</updated>
        <summary type="html"><![CDATA[<p>##10月</p>
<h3 id="成都之行">成都之行</h3>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/image-20241017192145594.png" alt="image-20241017192145594" style="zoom:15%;" />
<p>国庆节，我回了一趟四川，距离我上一次回四川才一个月，但是上一次是因为奶奶离世，直接回的家，这次考虑到父母忙，所以直接回成都放松几天，那段时间的票尤其不好抢，飞机价格又比较离谱，高铁，动车火车卧铺又抢不到，最后选择硬座28h回去，也是第一次挑战这么长的硬座，路上还是比较艰辛，但是价格确实很友好，也让在国庆这样的时间能够有有一个小小的座位回到那个遥远的地方。路途煎熬，心中也很迷茫，一边想着早点到达，可是一边又在想早点到又何妨呢，又有谁在等着你呢？带着这样的复杂心情，第二天到达了成都，出站的时候确实有一种怅然若失，就算是不久就和朋友一起吃饭 ，一起娱乐，但是心中始终感觉少了一些东西。回到成都感觉空气很舒服，也很喜欢这里的氛围，和朋友吃饭聊聊天，有时候我也在想我去那么远干什么？离家千里 ，总是抱着大城市见世面的眼光，认为这里机会多一点，可是真的多了吗？现在我也渐渐明白了其实城市只是决定了你的下限，更多的是看你个人的能力和思想。一味的在北京，我会开心吗？我在这里按照我的现状我会比成都好吗？需要认真的考虑下了。</p>
<p>回成都与其说回学校不如说是充电，和昔日老友小酌聊聊天，极大的缓解了我的内心一些不快。离别之日，613请我吃了一顿烤匠，也是第一次知道居然有花椒味的冰淇淋，味道一眼难尽</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/image-20241027190637245.png" style="zoom:15%;" />
<h3 id="烟雨青城">烟雨青城</h3>
<p>国庆几天，天气是那种阴天。出了四川才发现，原来只有四川是这样，很少看到大太阳，晴空万里的蓝天。这天出门看到了远山交错，山色空蒙。这可能是青城山这边很常见的景观，但是不知不觉间，自己就像很久没有看到过，就像一个离家多年的孩子，回到家乡，感觉一切都很新奇。于是我选择按下快门，留下这一瞬间</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/image-20241027192136859.png" alt="image-20241027192136859" style="zoom:15%;" />
<h3 id="吸引力">吸引力</h3>
<blockquote>
<p>人和人的吸引力都来自于 不了解没看透</p>
</blockquote>
<p>看到这样一段话，很有感触，也让我想到之前看到的一个词，祛魅。人与人之间的关系，太多太复杂我此时不敢妄加评论。那就换一个方向，人和任何事。实习这几个月来，我最大的感觉就是我对与工作这些事祛魅，以前自己在学校并没有做过很多和安全相关的实践，当时找4月份找hw的时候，自己总是怕这怕那，很胆怯，面试也很呆，后边王总分享了一些经验，加上自己的复盘和有一定数量的面试后。对于面试也就有自己的节奏把控，到后边面实习的时候，其实能够明显的感觉自己的面试能力有了很大的提升，后边面了三家暑期实习也都是通过了。在工作这段时间也是有这样的感觉，很多工作也是很质朴的工作方式， 没有那些高大上的东西，所以啊，很多时候确实是不要怕，勇敢的去试。自信一点，那么你肯定会拥有更多的机会。</p>
<h3 id="1024">1024</h3>
<p>10月24这天有一个公司有一个按计时器的活动，以10.24s为大奖，按上下误差来划分奖项，这个很考验运气。那天试了三次就按出了10.23和神秘大奖擦肩而过。得到了一个包，作为一个互联网待就业人员，这算是我第一个互联网礼物。</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/image-20241027192943591.png" alt="image-20241027192943591" style="zoom:15%;" />
<h3 id="秋又来了">秋又来了</h3>
<p>这段时间我注意到公司楼下一个树的树叶快掉光了，这棵树因为在路口，每天我上班等红灯都会看他，记得7月刚来北京时我借它繁茂的枝叶躲避骄阳，有时稍不注意，从他下面过还会被“梳个头”，9月以来，天气变冷，他的枝叶也慢慢掉落，每天都可以看到底下的枝叶散落，一直想拍一张，可是经常是卡点上班，加上人太多，有点不好意思拿出手机拍照，这天我再次路过它时，发现只有些许叶子还在上面时，竟有有一种岁月流逝的伤感，（图片中最靠近路口的一棵树）</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/image-20241027192959273.png" alt="image-20241027192959273" style="zoom:25%;" />
<h3 id="毕业">毕业？</h3>
<p>有一家单位需要用到学信网信息，于是打开许久未用的学信网，发现4月的照片已经拍好更新了，回想已是半年前的事了，现在已经是10月下旬，秋招好像已经接近尾声了，可是自己的秋招好像从未开始？迷茫的前路！自己好像已经没有前些日子那般底气，那般勇敢，自己好像已经开始怯战，每天都是在各种招聘软件上刷着信息，一次次的投递石沉大海，前些日子，朋友问我最近怎么样，我不知如何回答？往日我都是充满能量，有一种毫不畏惧的信心，可是我有一种迷茫，一切都是未知。压力过后，我只能选择继续投递，继续补知识，继续确定一些计划，这也是我目前能够想到去应对的措施。我不知道自己能否调整过来，但是我觉得我不该被这个打败</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/image-20241027193045372.png" alt="image-20241027193045372" style="zoom:25%;" />
<h3 id="见闻录">见闻录</h3>
<p>最近看到一篇<a href="https://www.kitsch.life/2022/09/18/%e5%8c%97%e4%ba%ac%e8%a7%81%e9%97%bb%e5%bd%95-%e9%9a%8f%e7%ac%94/">随笔</a>,很有意思作者虽不是专业的社会学家,但是也是头头是道一些观点我也是很认可,那来放在自己身上确实也是照出了自己不少问题.</p>
<p>奶头乐理论(Titty Tainment)<br>
什么是奶头乐理论<br>
奶头乐理论的前提:社会动荡的主要因素之一是阶层之间的利益冲突。<br>
奶头乐理论的描述:<br>
由于生产力的不断上升，世界上的一大部分人口将不必也无法积极参与产品和服务的生产。为了安慰这些“被遗弃”的人，避免阶级冲突，方法之一就是制造“奶头”、喂之以“奶头”-一使令人陶醉的消遣娱乐和充满感官刺激的产品(比如网络、电视和游戏)填满人们的生活、转移其注意力和不满情绪，令其沉浸在“快乐”中不知不觉丧失思考能力、无心挑战现有的统治阶级。<br>
&quot;奶头”的形式有两种:<br>
一种是发泄性娱乐，比如鼓励暴力网络游戏、鼓动口水战，<br>
一种是满足性游戏，比如拍摄大量的肥皂剧和偶像剧，大量报道明星丑闻，播放真人秀等大众娱乐节目。</p>
<p>9月的总结中我写到<code>北京是一个很神奇的地方，他有着高档的写字楼，世界一流的商场，但是与他直线距离不到20km就是一望无际的外来打工居住区，或是村上的平房，或是便宜公寓。</code>当时我没有找到一个很合适的词来形容这个感觉,现在看到这篇文章,我觉得割裂一词确实很适合,虽然用一种强烈的生猛,但是现实也同样如此,真实的猛烈.你可以看到收入代表国家高收入的人群,高权力人群和来自全国各地的'下层'人民和谐的生活在一起.当这种“奶头”逐渐的占用大量的时间，就会丧失对现实社会的理性思考，从而产生“马太效应”：沉迷的人继续沉迷，清醒的人继续清醒。然后贫富差距越来越大，甚至拉开阶层之间的差距。得益于自媒体的发达，也有了越来越多的人认识到了“奶头乐产品”对自己的危害。这些人也知道每天刷短视频不好，成天看小姐姐跳舞带不来任何价值，并因此而感到深深的自责。但同时，却又深陷其中，无法自拔。从而，带来了精神内耗。这种精神内耗会对当事人造成很不好的影响。首先就是影响个人的情绪；其次会降低生活质量；再次是降低信心，透支心力；最后是恶性循环，心理失衡。一种精神内耗不断纠缠,又有多少能走出舒适圈,走出陷阱呢?<br>
##11月</p>
<h3 id="暂离北京">暂离北京</h3>
<p>最后还是选择离开，离开了这待了4个月的城市。离职当天心情很复杂，自己好像有一万种离开理由但是却总是站不住脚，一直在说找好下一家在离职，但是好像各种事情全都压了上来。时间总是这样，在北京这几个月，所见所闻确实让我有很多收获，对于工作，对于自己的发展，对于自己的所面对的一切。离京前几天一直在和北京的朋友交流，时常叹息，自己的目光狭隘选择错了很多东西，导致自己现在如此被动。开玩笑着说自己现在是钱也得到，技术也没有沉淀下来。确实是一场满失败的经历。无可否认，我确实比6月更加丰富，有了更多收获，接触到了cy内部的一些产品和技术，积攒到了一些小财富，一点小牢骚罢了，可能人总是会去美化未曾走过的路 。离职当天，拍下了这个待了100多天的大楼，下午三点人很少，大家可能都在楼里辛苦的工作吧！</p>
<p>​                                                 <img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/image-20241124161822626.png" alt="image-20241124161822626" style="zoom:25%;" /></p>
<p>这次又是早班机，时间总是那么巧合，今年六月我来北京就是赶得早班车，看着时间，好像有一种命运中注定？今年自从和那个女孩分开，我其实一直都心情低落，自己一直陷入一种负能量的状态，但是这就是自己所犯得的错误。如果总结这两张照片的心情，其实底色都差不多。6月出发时，心中更加焦虑的是未知？和她的未来未知？新公司的未知？前途的未知，11月回来时，心中思考的居然也是这些问题。</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/image-20241124161814990.png" alt="image-20241124161814990" style="zoom:25%;" />
<h3 id="印证">印证</h3>
<p><a href="https://v.douyin.com/iDjQKG9t/">出处</a>。经历了秋招的残酷最近看到这些文章自己很有感触，记录下来。</p>
<p>我上大学的时候，对于职业的认知仅仅停留在每月工资多少的层面，至于职业和人生的交织关系，总觉得在自己漫长的人生跨度面前，考虑那么多是一种自我束缚。终有一天，父母语重心长地劝我回家考公，并将他们自己卑微的一生拿来作参照，以证明有编制和无编制的工作存在天壤之别。那时，面对大江南北不同地河的泽业幻想，**我始终认为对未来那种不确定的探索拼搏要比安稳一辈子的被动接受更具诱惑，**可是长辈言语中传递的信息也让我深刻明白:走别人走过的好路，比走出自己的路要轻松省力的多。虽然这两条路自己都没有亲身经历，但是脑补出的画面会一点点消耗仗剑走天涯的冲动,，最终我做出了“回去建设自己的家乡”的选择。**人们总喜欢将自己的选择用情怀的语句来粉饰增色，以掩盖深思熟虑后的利益取舍，**我也一样。就这样，在那个考公还不算太火热的年代，我端上了传说中的铁饭碗。家乡是个小地方，这里感受不到日新月异的时代变革和自我奋斗的锐意进取之间那种相辅相成的价值获得感，有的仅是如何通过一份工作来承接眼前的小镇生活。你的地位、婚姻、交往圈子或多或少都有你工作的影子。那些本打算用青春的力量打拼出的东西，在这里似乎可以用一场考试即可获得。也许是我从小拥有的不多，所以才感到获得的很多，能否用一份工作去追平之前的人生差距、可能才是这份工作最大的意义所在。在相当长为一段自我满足和陶醉的过程中，我用自己的人生印证了那条别人走过的路，正如父母的劝诚所言，<strong>稳定可以扫清生活的坎坷，体面可以远离成长的挫折</strong>，人生得此会变得清激。很快，我顺着这条路走到了山脚，看着眼前通往高处的山阶，我明白这些台阶就是别入口中象征着人与人之间等级划分的阶层。一开始，我依靠在平路上积攒的惯性，几步一跨地试图尽快与地面拉开距离。慢慢地，我耗尽了体能，很难增加前行的势能，看着耐不时从我身边一跃而过的同类，一种焦虑悄然而生。偶然的机会，我结识了几位可以倾诉要肠的前辈，当我诉说心中烦恼时，他们指着密林中一条蜿蜒小道，说道: **一步一个台队太慢，从这里上去别有洞天、我醒到灌顶，走进了里面，路面的混滑让我不得不卑躬屈膝、充后的痛气让我不得不戴上面具，一路的制越让我不得不伪装自己。**我开始怀念大道的坦荡，不仅因为行为举止不会扭曲，更事要的是内心不会那样遮天蔽日。有一天，我站在已经停留很久的半山腰仰望山巅，那是“爬山者”的梦想，也是万人追逐的天堂，但自己早已无力攀爬,，一个人的精力和机遇总归是有限。当一个人停下脚步，脑海中便会浮现来时的回忆。我转身看着自己走过的路、出发时的那片士地也一并尽收眼帘。我端详着眼前的景色，一片静论样和，万家灯火展现着一个群体的大气磅谱，远外喧露讲述着一个民族的古老传说、袅袅炊烟勾勤着一个国家的复兴脉络、而那些暗含其中的矛盾与不公，就像美玉中的暇疵一样，让入心生都夷和厌恶，我突然明白了这条路的意义，不是所谓的跨越阶级，也不是表面上的光鲜亮丽，更不是一辈子的一劳永逸，它会助你登上高台，俯瞰我们的山河，用智慧的双眼发现隐藏在角落里的污垢，然后用一生的热血去化解社会前行的桎梏和人民生活的苦涩。当我回头想再看一眼山巅时，却发现身后已是空空荡荡，目之所及之处一马平川，大地上酒满日月星辰的光芒，那些人生路上的颠鲼起伏和攀爬追逐，只不过是心中的涟漪在荡漾。</p>
<h3 id="交流">交流</h3>
<p>回到学校和一位创业的朋友交流了一会，很感谢能花一个多小时给我大概讲了他的大学创业史，我从他的故事我看到了两点，首先是你要提前想考自己要做什么，你是要好好学习一门过硬的技术，还是要抓住机会去创业做点小生意，在这个存量市场越来越来少的时代，很多人是被时代推着走的，那么我认为被推着走的时候也要明白自己要的什么。尽早的决定方向，然后去实践调整。其次是执行力，我这个人时常做出一些美好计划，但是当去落实时总会有各种理由去推脱。这或许是我在很多时候并没有如愿的主要原因吧。</p>
<p>人本质上只有经历，没有年纪!年纪只是一个虚无的时间概念，没有任何价值。人生的本质意义是经历、体验、试错，而这些来自于**认知、野心、勇气和超强的执行力。认知解决知道不知道的问题，野心解决想要不想要的问题，勇气解决敢不敢的问题，执行力解决做不做的的问题，并且这四者互为来源、互相支撑。**很多时候，你在一个点上取得突破，就能带动其他三个方面的提升我不禁在心里暗竖大拇指，年纪轻轻就有如此境界不简单!我又问他:“这算是比较理论的了，在实操方面有什么独特的方法吗?第一，高效率的向高手学习并实践。学海无涯，人生有涯。所有的学习都是以实践为导向，事业需要我学什么我才学什么，我不会胡乱学各种东西浪言生命。确定了要学什么后，我就找10位做这个事的高手，能模仿就模仿，模仿不到的地方就付费学习。现在是网络时代，也是开卷考试的时代，各行业的高手们在网络上都很活跃，当然他们的行动和成果也都展现在网络上。只要你是一个有心人，只要你锁定了一个领域，你就可以轻而易举的找到该领域的十位高手，接下来就是高效率的学习和模仿，至于看不到的地方，那京自己摸索，或者直接付费学习，相当于买答案了。</p>
<p>第二，选择收入天花板高的行业。不同行业的收入天花板有高有低，差距巨大。有的行业再努力，一年的收入也不过十几万。有的行业努努力，就能一年几十万、上百万，如果再有天赋或团队，一年上千万也不是不可能。年入 50万，也许就是大多数打工人一辈子都无法跨越的收入上限，而且打工人的思维永远都是限性的，他们的算法永远都是，一个月攒5000，那十个月就能攒五万，然而，这种算法之下的财富积累，必然是非常缓慢的。真正赚钱的人，财富积累的方式，往往都是指数爆炸之形态的。穷人家的孩子很难一步一步从0到1的，都是抓佳了机会，一两年的时间就赚到后半辈子的财富。</p>
<h3 id="表白">表白</h3>
<p>今天开到一篇帖子，原文大概是<code>表白，或许是真正意义上的表白考公期间，喜欢上了坐我对面的男孩，我也很清楚的可以感受到他有意无意的目光。只是我们都太忙了，都忙着赶路。每天抬头能看到，就已经很知足啦。只是最近我发现我比你早到的时候会有想给你占座位的冲动，接水的时候会想帮你一起接，偶尔对视上的时候慌乱无比.我知道你开始让我的情绪不受控了，所以我决定搬到别的楼层了。但还是很谢谢你这段时间的陪伴，陌生的朋友。要是我们不是大四遇见的就好了祝你成功上岸。</code>看到这里我不禁怀疑自己的过往，我自己总是标榜这灵魂的共鸣远比什么都凑巧更适合我，可是当一段关系真的来到面前时自己好像并没有这样做？迅速的确定关系，又草草的收场。事后又展示的是一个自卑，怯懦的形象，就就不敢面对。看到这些故事，我又恍惚了，对一个人的欣赏或者好感就一定需要发展到恋爱关系吗？当一段恋爱关系草草的确立那么迎接他的一定是草草的结束。回到学校半个月，我过的比较颓废，睡到自然醒，玩游戏，到处玩，面对朋友和父母都是笑着说在调整自己。负能量的状态我不知道能否调整过来，但是始终是要试一试，我曾经简单将他归因为那个女孩分手，现在看其实一切都是自己的不自信！不成熟！或许是在用这段关系的失败来掩盖自己别的地方的失败。这一切都是自己造成的，都是自己的选择，自己就是直接负责人。面对那段关系终觉亏欠，可是现实已经成了这样，一天碰巧还遇见，那个女孩对我有一种明确的抗拒和讨厌，自己现在没有选择幸福的权力，也没有变得足够的强。所以这里就先到这吧，那天我终于删掉了和她的所有照片，朋友圈。删完我心里好像一下子就松下来了，这个困扰了我近5个月的心魔,被打败了吗？我想应该没有，它或许换了另外一种方式在周围，但是这次我想它应该是推着我前进！看到这些同龄人在提升自己路上所作准备，展现出的勇敢，坚毅实在令我诚服。面对感情的克制，隐忍令我动容。回收自己过去的那段事件，好像是干什么都是三分热度，现在看自己只有发现的眼睛，没有行动的毅力，我想在2024年的最后一个月我该有所改变了吧！</p>
<h2 id="12月">12月</h2>
<h3 id="冒菜">冒菜</h3>
<p>3号这天我像往常一样点了一份外卖，我除非和被人分享一般很少拍美食特别是外卖，但是不知是平时吃的外卖都是色香俱失还是很少见到看着就很有食欲的外卖了，这天破天荒拍了一张，虽然后面吃了其实并不好吃，但是卖相很喜欢也就留下来了。</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/image-20241227002302821.png" alt="image-20241227002302821" style="zoom:25%;" />
<h3 id="冷冷冷">冷冷冷</h3>
<p>成都进入冬季温度进入个位数，作为一天除了睡觉都在电脑前面的人来说确实太冷了，在离开北京之前北京的温度其实和现在的成都差不多但是，因为白天大多数时间都在公司有空调，在出租屋里待得时间比较少没有这么明显，最近确实感觉这个手就是暖和不起来，特别是想玩会游戏的时候手都快没有知觉了，戴手套又不方便。和朋友开玩笑都说靠一身正气来御寒。</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/image-20241227002313088.png" alt="image-20241227002313088" style="zoom:25%;" />
<h2 id="要命的闹钟">“要命”的闹钟</h2>
<p>算是大学中一个比较重大的失误吧，考四级前有点失眠晚上1点多才睡觉，当时比较紧张，就把平时的闹钟改了一个时间换上了，而这个闹钟是之前在北京上班的时候定的（个人习惯一直在用第三个）没想到这个居然是一个工作日闹钟，而考试是在周末。当我睡醒已经8:59了四级要求8:30左右就要进考场。当时一下子穿好衣服，脑子就在想还去不去，但是当我在想自己去不去时我的心里就浮现了必须去，就算进不去考不了也要到考场让老师让保安当面给我说，不能放弃任何一次机会，虽然这次准备的也不好，本来还留了一些等到早起再看看呢。当时从起床到坐在教室花了5分钟，刚坐到教室就开始考试计时，我还在那儿喘着粗气（笑）。这也算是一个教训，做事很不认真。这个小细节没处理好，幸好这次是一个考试，还能在自己承受范围之内。</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/image-20241227003337720.png" alt="image-20241227003337720" style="zoom:25%;" />
<h2 id="秋招终章">秋招终章</h2>
<p>和朋友聊天。又去看看了最后离京前投了的一家公司的校招。发现流程差不多都终止了。看来这次秋招真的就是终章了，本次秋招前前后后大概投了一百多家，目前只有一家有面试，剩下的都是石沉大海，期间也请教了一些前辈对自己的简历进行了一些修改完善，当时每天晚上还在公司补一些面经但是现在看确实是有一些无能为力了。连面试的机会都没有，我对于春招并不抱太大的希望，秋招如此大量的hc都没有消息，在找工作人数更多的春招，我是不太乐观的。路虽远，行则将之，不知未来如何，但是什么都不做一定是不会有什么改变的！</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/image-20241227002516387.png" alt="image-20241227002516387" style="zoom: 50%;" />
<h2 id="观点小记">观点小记</h2>
<ul>
<li>
<p>一生中与你相处时间最长的就是你自己，如果连你自己都不重视自己的感受，那真的不会再有人站在你这一边了。所以在脑海里刻薄地自责，逼自己超负荷工作，或是拿自己和别人比较时，都是在帮别人一起残忍地欺负自己。你永远是自己生机勃勃的战友，而不是别人投射在你身上的幽灵。</p>
<ul>
<li>自责、逼迫自己过度努力，以及与别人比较，是一种对自己的“伤害”行为，甚至是在帮助外界压迫自己。你应该成为自己最强的盟友，而不是成为外界评价的影子或投射。</li>
</ul>
</li>
<li>
<p>你一点都不重要，你细想除了家人，谁会在意你，假设你死了，也没几个人会记得你。请必须记住，除了生死之外，你所感受到的一切情绪都是你的执着带给你的痛苦，而非真实存在，你的生活无非三件事，你的钱，你的健康，你的责任，而你的人生只有一件事，回归内心的平静，明心见性。在生活中，不要听压力就是动力，压力只能转换成病历，所以你的生活与人生的秘籍只有一个，那就是回归平静和安然的内心。人一旦看破本质，心态就变了，你随意，随你意，无所谓，没关系，一切OK。</p>
</li>
<li>
<p>有人说的对，思想深遂的年轻人会被思维限制了行动。因为他的灵魂走在了年龄前面。请相信这样一句话，如果你没有去亲身实践你所懂得的道理，当这样的道理你懂得越多，你就越割裂，就越无法走在人生的道路上。<br>
不要觉得自己的思想很深刻，思想是会随着进转而变化，**你需要弯腰去做一些你自以为已经懂得的小事，去成长，去积累，去接触，去身体力行的感受这个社会。**如果感觉思想停滞不前。那就说明一定是思想走得太快，你需要去等等你的身体需要去花费时间在实践上，然后你的思想才能更进一步，这二者永远是相辅相成的。</p>
<ul>
<li>在和chatgpt探讨后我认为有几个关键词，</li>
</ul>
</li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<p>##10月</p>
<h3 id="成都之行">成都之行</h3>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/image-20241017192145594.png" alt="image-20241017192145594" style="zoom:15%;" />
<p>国庆节，我回了一趟四川，距离我上一次回四川才一个月，但是上一次是因为奶奶离世，直接回的家，这次考虑到父母忙，所以直接回成都放松几天，那段时间的票尤其不好抢，飞机价格又比较离谱，高铁，动车火车卧铺又抢不到，最后选择硬座28h回去，也是第一次挑战这么长的硬座，路上还是比较艰辛，但是价格确实很友好，也让在国庆这样的时间能够有有一个小小的座位回到那个遥远的地方。路途煎熬，心中也很迷茫，一边想着早点到达，可是一边又在想早点到又何妨呢，又有谁在等着你呢？带着这样的复杂心情，第二天到达了成都，出站的时候确实有一种怅然若失，就算是不久就和朋友一起吃饭 ，一起娱乐，但是心中始终感觉少了一些东西。回到成都感觉空气很舒服，也很喜欢这里的氛围，和朋友吃饭聊聊天，有时候我也在想我去那么远干什么？离家千里 ，总是抱着大城市见世面的眼光，认为这里机会多一点，可是真的多了吗？现在我也渐渐明白了其实城市只是决定了你的下限，更多的是看你个人的能力和思想。一味的在北京，我会开心吗？我在这里按照我的现状我会比成都好吗？需要认真的考虑下了。</p>
<p>回成都与其说回学校不如说是充电，和昔日老友小酌聊聊天，极大的缓解了我的内心一些不快。离别之日，613请我吃了一顿烤匠，也是第一次知道居然有花椒味的冰淇淋，味道一眼难尽</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/image-20241027190637245.png" style="zoom:15%;" />
<h3 id="烟雨青城">烟雨青城</h3>
<p>国庆几天，天气是那种阴天。出了四川才发现，原来只有四川是这样，很少看到大太阳，晴空万里的蓝天。这天出门看到了远山交错，山色空蒙。这可能是青城山这边很常见的景观，但是不知不觉间，自己就像很久没有看到过，就像一个离家多年的孩子，回到家乡，感觉一切都很新奇。于是我选择按下快门，留下这一瞬间</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/image-20241027192136859.png" alt="image-20241027192136859" style="zoom:15%;" />
<h3 id="吸引力">吸引力</h3>
<blockquote>
<p>人和人的吸引力都来自于 不了解没看透</p>
</blockquote>
<p>看到这样一段话，很有感触，也让我想到之前看到的一个词，祛魅。人与人之间的关系，太多太复杂我此时不敢妄加评论。那就换一个方向，人和任何事。实习这几个月来，我最大的感觉就是我对与工作这些事祛魅，以前自己在学校并没有做过很多和安全相关的实践，当时找4月份找hw的时候，自己总是怕这怕那，很胆怯，面试也很呆，后边王总分享了一些经验，加上自己的复盘和有一定数量的面试后。对于面试也就有自己的节奏把控，到后边面实习的时候，其实能够明显的感觉自己的面试能力有了很大的提升，后边面了三家暑期实习也都是通过了。在工作这段时间也是有这样的感觉，很多工作也是很质朴的工作方式， 没有那些高大上的东西，所以啊，很多时候确实是不要怕，勇敢的去试。自信一点，那么你肯定会拥有更多的机会。</p>
<h3 id="1024">1024</h3>
<p>10月24这天有一个公司有一个按计时器的活动，以10.24s为大奖，按上下误差来划分奖项，这个很考验运气。那天试了三次就按出了10.23和神秘大奖擦肩而过。得到了一个包，作为一个互联网待就业人员，这算是我第一个互联网礼物。</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/image-20241027192943591.png" alt="image-20241027192943591" style="zoom:15%;" />
<h3 id="秋又来了">秋又来了</h3>
<p>这段时间我注意到公司楼下一个树的树叶快掉光了，这棵树因为在路口，每天我上班等红灯都会看他，记得7月刚来北京时我借它繁茂的枝叶躲避骄阳，有时稍不注意，从他下面过还会被“梳个头”，9月以来，天气变冷，他的枝叶也慢慢掉落，每天都可以看到底下的枝叶散落，一直想拍一张，可是经常是卡点上班，加上人太多，有点不好意思拿出手机拍照，这天我再次路过它时，发现只有些许叶子还在上面时，竟有有一种岁月流逝的伤感，（图片中最靠近路口的一棵树）</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/image-20241027192959273.png" alt="image-20241027192959273" style="zoom:25%;" />
<h3 id="毕业">毕业？</h3>
<p>有一家单位需要用到学信网信息，于是打开许久未用的学信网，发现4月的照片已经拍好更新了，回想已是半年前的事了，现在已经是10月下旬，秋招好像已经接近尾声了，可是自己的秋招好像从未开始？迷茫的前路！自己好像已经没有前些日子那般底气，那般勇敢，自己好像已经开始怯战，每天都是在各种招聘软件上刷着信息，一次次的投递石沉大海，前些日子，朋友问我最近怎么样，我不知如何回答？往日我都是充满能量，有一种毫不畏惧的信心，可是我有一种迷茫，一切都是未知。压力过后，我只能选择继续投递，继续补知识，继续确定一些计划，这也是我目前能够想到去应对的措施。我不知道自己能否调整过来，但是我觉得我不该被这个打败</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/image-20241027193045372.png" alt="image-20241027193045372" style="zoom:25%;" />
<h3 id="见闻录">见闻录</h3>
<p>最近看到一篇<a href="https://www.kitsch.life/2022/09/18/%e5%8c%97%e4%ba%ac%e8%a7%81%e9%97%bb%e5%bd%95-%e9%9a%8f%e7%ac%94/">随笔</a>,很有意思作者虽不是专业的社会学家,但是也是头头是道一些观点我也是很认可,那来放在自己身上确实也是照出了自己不少问题.</p>
<p>奶头乐理论(Titty Tainment)<br>
什么是奶头乐理论<br>
奶头乐理论的前提:社会动荡的主要因素之一是阶层之间的利益冲突。<br>
奶头乐理论的描述:<br>
由于生产力的不断上升，世界上的一大部分人口将不必也无法积极参与产品和服务的生产。为了安慰这些“被遗弃”的人，避免阶级冲突，方法之一就是制造“奶头”、喂之以“奶头”-一使令人陶醉的消遣娱乐和充满感官刺激的产品(比如网络、电视和游戏)填满人们的生活、转移其注意力和不满情绪，令其沉浸在“快乐”中不知不觉丧失思考能力、无心挑战现有的统治阶级。<br>
&quot;奶头”的形式有两种:<br>
一种是发泄性娱乐，比如鼓励暴力网络游戏、鼓动口水战，<br>
一种是满足性游戏，比如拍摄大量的肥皂剧和偶像剧，大量报道明星丑闻，播放真人秀等大众娱乐节目。</p>
<p>9月的总结中我写到<code>北京是一个很神奇的地方，他有着高档的写字楼，世界一流的商场，但是与他直线距离不到20km就是一望无际的外来打工居住区，或是村上的平房，或是便宜公寓。</code>当时我没有找到一个很合适的词来形容这个感觉,现在看到这篇文章,我觉得割裂一词确实很适合,虽然用一种强烈的生猛,但是现实也同样如此,真实的猛烈.你可以看到收入代表国家高收入的人群,高权力人群和来自全国各地的'下层'人民和谐的生活在一起.当这种“奶头”逐渐的占用大量的时间，就会丧失对现实社会的理性思考，从而产生“马太效应”：沉迷的人继续沉迷，清醒的人继续清醒。然后贫富差距越来越大，甚至拉开阶层之间的差距。得益于自媒体的发达，也有了越来越多的人认识到了“奶头乐产品”对自己的危害。这些人也知道每天刷短视频不好，成天看小姐姐跳舞带不来任何价值，并因此而感到深深的自责。但同时，却又深陷其中，无法自拔。从而，带来了精神内耗。这种精神内耗会对当事人造成很不好的影响。首先就是影响个人的情绪；其次会降低生活质量；再次是降低信心，透支心力；最后是恶性循环，心理失衡。一种精神内耗不断纠缠,又有多少能走出舒适圈,走出陷阱呢?<br>
##11月</p>
<h3 id="暂离北京">暂离北京</h3>
<p>最后还是选择离开，离开了这待了4个月的城市。离职当天心情很复杂，自己好像有一万种离开理由但是却总是站不住脚，一直在说找好下一家在离职，但是好像各种事情全都压了上来。时间总是这样，在北京这几个月，所见所闻确实让我有很多收获，对于工作，对于自己的发展，对于自己的所面对的一切。离京前几天一直在和北京的朋友交流，时常叹息，自己的目光狭隘选择错了很多东西，导致自己现在如此被动。开玩笑着说自己现在是钱也得到，技术也没有沉淀下来。确实是一场满失败的经历。无可否认，我确实比6月更加丰富，有了更多收获，接触到了cy内部的一些产品和技术，积攒到了一些小财富，一点小牢骚罢了，可能人总是会去美化未曾走过的路 。离职当天，拍下了这个待了100多天的大楼，下午三点人很少，大家可能都在楼里辛苦的工作吧！</p>
<p>​                                                 <img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/image-20241124161822626.png" alt="image-20241124161822626" style="zoom:25%;" /></p>
<p>这次又是早班机，时间总是那么巧合，今年六月我来北京就是赶得早班车，看着时间，好像有一种命运中注定？今年自从和那个女孩分开，我其实一直都心情低落，自己一直陷入一种负能量的状态，但是这就是自己所犯得的错误。如果总结这两张照片的心情，其实底色都差不多。6月出发时，心中更加焦虑的是未知？和她的未来未知？新公司的未知？前途的未知，11月回来时，心中思考的居然也是这些问题。</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/image-20241124161814990.png" alt="image-20241124161814990" style="zoom:25%;" />
<h3 id="印证">印证</h3>
<p><a href="https://v.douyin.com/iDjQKG9t/">出处</a>。经历了秋招的残酷最近看到这些文章自己很有感触，记录下来。</p>
<p>我上大学的时候，对于职业的认知仅仅停留在每月工资多少的层面，至于职业和人生的交织关系，总觉得在自己漫长的人生跨度面前，考虑那么多是一种自我束缚。终有一天，父母语重心长地劝我回家考公，并将他们自己卑微的一生拿来作参照，以证明有编制和无编制的工作存在天壤之别。那时，面对大江南北不同地河的泽业幻想，**我始终认为对未来那种不确定的探索拼搏要比安稳一辈子的被动接受更具诱惑，**可是长辈言语中传递的信息也让我深刻明白:走别人走过的好路，比走出自己的路要轻松省力的多。虽然这两条路自己都没有亲身经历，但是脑补出的画面会一点点消耗仗剑走天涯的冲动,，最终我做出了“回去建设自己的家乡”的选择。**人们总喜欢将自己的选择用情怀的语句来粉饰增色，以掩盖深思熟虑后的利益取舍，**我也一样。就这样，在那个考公还不算太火热的年代，我端上了传说中的铁饭碗。家乡是个小地方，这里感受不到日新月异的时代变革和自我奋斗的锐意进取之间那种相辅相成的价值获得感，有的仅是如何通过一份工作来承接眼前的小镇生活。你的地位、婚姻、交往圈子或多或少都有你工作的影子。那些本打算用青春的力量打拼出的东西，在这里似乎可以用一场考试即可获得。也许是我从小拥有的不多，所以才感到获得的很多，能否用一份工作去追平之前的人生差距、可能才是这份工作最大的意义所在。在相当长为一段自我满足和陶醉的过程中，我用自己的人生印证了那条别人走过的路，正如父母的劝诚所言，<strong>稳定可以扫清生活的坎坷，体面可以远离成长的挫折</strong>，人生得此会变得清激。很快，我顺着这条路走到了山脚，看着眼前通往高处的山阶，我明白这些台阶就是别入口中象征着人与人之间等级划分的阶层。一开始，我依靠在平路上积攒的惯性，几步一跨地试图尽快与地面拉开距离。慢慢地，我耗尽了体能，很难增加前行的势能，看着耐不时从我身边一跃而过的同类，一种焦虑悄然而生。偶然的机会，我结识了几位可以倾诉要肠的前辈，当我诉说心中烦恼时，他们指着密林中一条蜿蜒小道，说道: **一步一个台队太慢，从这里上去别有洞天、我醒到灌顶，走进了里面，路面的混滑让我不得不卑躬屈膝、充后的痛气让我不得不戴上面具，一路的制越让我不得不伪装自己。**我开始怀念大道的坦荡，不仅因为行为举止不会扭曲，更事要的是内心不会那样遮天蔽日。有一天，我站在已经停留很久的半山腰仰望山巅，那是“爬山者”的梦想，也是万人追逐的天堂，但自己早已无力攀爬,，一个人的精力和机遇总归是有限。当一个人停下脚步，脑海中便会浮现来时的回忆。我转身看着自己走过的路、出发时的那片士地也一并尽收眼帘。我端详着眼前的景色，一片静论样和，万家灯火展现着一个群体的大气磅谱，远外喧露讲述着一个民族的古老传说、袅袅炊烟勾勤着一个国家的复兴脉络、而那些暗含其中的矛盾与不公，就像美玉中的暇疵一样，让入心生都夷和厌恶，我突然明白了这条路的意义，不是所谓的跨越阶级，也不是表面上的光鲜亮丽，更不是一辈子的一劳永逸，它会助你登上高台，俯瞰我们的山河，用智慧的双眼发现隐藏在角落里的污垢，然后用一生的热血去化解社会前行的桎梏和人民生活的苦涩。当我回头想再看一眼山巅时，却发现身后已是空空荡荡，目之所及之处一马平川，大地上酒满日月星辰的光芒，那些人生路上的颠鲼起伏和攀爬追逐，只不过是心中的涟漪在荡漾。</p>
<h3 id="交流">交流</h3>
<p>回到学校和一位创业的朋友交流了一会，很感谢能花一个多小时给我大概讲了他的大学创业史，我从他的故事我看到了两点，首先是你要提前想考自己要做什么，你是要好好学习一门过硬的技术，还是要抓住机会去创业做点小生意，在这个存量市场越来越来少的时代，很多人是被时代推着走的，那么我认为被推着走的时候也要明白自己要的什么。尽早的决定方向，然后去实践调整。其次是执行力，我这个人时常做出一些美好计划，但是当去落实时总会有各种理由去推脱。这或许是我在很多时候并没有如愿的主要原因吧。</p>
<p>人本质上只有经历，没有年纪!年纪只是一个虚无的时间概念，没有任何价值。人生的本质意义是经历、体验、试错，而这些来自于**认知、野心、勇气和超强的执行力。认知解决知道不知道的问题，野心解决想要不想要的问题，勇气解决敢不敢的问题，执行力解决做不做的的问题，并且这四者互为来源、互相支撑。**很多时候，你在一个点上取得突破，就能带动其他三个方面的提升我不禁在心里暗竖大拇指，年纪轻轻就有如此境界不简单!我又问他:“这算是比较理论的了，在实操方面有什么独特的方法吗?第一，高效率的向高手学习并实践。学海无涯，人生有涯。所有的学习都是以实践为导向，事业需要我学什么我才学什么，我不会胡乱学各种东西浪言生命。确定了要学什么后，我就找10位做这个事的高手，能模仿就模仿，模仿不到的地方就付费学习。现在是网络时代，也是开卷考试的时代，各行业的高手们在网络上都很活跃，当然他们的行动和成果也都展现在网络上。只要你是一个有心人，只要你锁定了一个领域，你就可以轻而易举的找到该领域的十位高手，接下来就是高效率的学习和模仿，至于看不到的地方，那京自己摸索，或者直接付费学习，相当于买答案了。</p>
<p>第二，选择收入天花板高的行业。不同行业的收入天花板有高有低，差距巨大。有的行业再努力，一年的收入也不过十几万。有的行业努努力，就能一年几十万、上百万，如果再有天赋或团队，一年上千万也不是不可能。年入 50万，也许就是大多数打工人一辈子都无法跨越的收入上限，而且打工人的思维永远都是限性的，他们的算法永远都是，一个月攒5000，那十个月就能攒五万，然而，这种算法之下的财富积累，必然是非常缓慢的。真正赚钱的人，财富积累的方式，往往都是指数爆炸之形态的。穷人家的孩子很难一步一步从0到1的，都是抓佳了机会，一两年的时间就赚到后半辈子的财富。</p>
<h3 id="表白">表白</h3>
<p>今天开到一篇帖子，原文大概是<code>表白，或许是真正意义上的表白考公期间，喜欢上了坐我对面的男孩，我也很清楚的可以感受到他有意无意的目光。只是我们都太忙了，都忙着赶路。每天抬头能看到，就已经很知足啦。只是最近我发现我比你早到的时候会有想给你占座位的冲动，接水的时候会想帮你一起接，偶尔对视上的时候慌乱无比.我知道你开始让我的情绪不受控了，所以我决定搬到别的楼层了。但还是很谢谢你这段时间的陪伴，陌生的朋友。要是我们不是大四遇见的就好了祝你成功上岸。</code>看到这里我不禁怀疑自己的过往，我自己总是标榜这灵魂的共鸣远比什么都凑巧更适合我，可是当一段关系真的来到面前时自己好像并没有这样做？迅速的确定关系，又草草的收场。事后又展示的是一个自卑，怯懦的形象，就就不敢面对。看到这些故事，我又恍惚了，对一个人的欣赏或者好感就一定需要发展到恋爱关系吗？当一段恋爱关系草草的确立那么迎接他的一定是草草的结束。回到学校半个月，我过的比较颓废，睡到自然醒，玩游戏，到处玩，面对朋友和父母都是笑着说在调整自己。负能量的状态我不知道能否调整过来，但是始终是要试一试，我曾经简单将他归因为那个女孩分手，现在看其实一切都是自己的不自信！不成熟！或许是在用这段关系的失败来掩盖自己别的地方的失败。这一切都是自己造成的，都是自己的选择，自己就是直接负责人。面对那段关系终觉亏欠，可是现实已经成了这样，一天碰巧还遇见，那个女孩对我有一种明确的抗拒和讨厌，自己现在没有选择幸福的权力，也没有变得足够的强。所以这里就先到这吧，那天我终于删掉了和她的所有照片，朋友圈。删完我心里好像一下子就松下来了，这个困扰了我近5个月的心魔,被打败了吗？我想应该没有，它或许换了另外一种方式在周围，但是这次我想它应该是推着我前进！看到这些同龄人在提升自己路上所作准备，展现出的勇敢，坚毅实在令我诚服。面对感情的克制，隐忍令我动容。回收自己过去的那段事件，好像是干什么都是三分热度，现在看自己只有发现的眼睛，没有行动的毅力，我想在2024年的最后一个月我该有所改变了吧！</p>
<h2 id="12月">12月</h2>
<h3 id="冒菜">冒菜</h3>
<p>3号这天我像往常一样点了一份外卖，我除非和被人分享一般很少拍美食特别是外卖，但是不知是平时吃的外卖都是色香俱失还是很少见到看着就很有食欲的外卖了，这天破天荒拍了一张，虽然后面吃了其实并不好吃，但是卖相很喜欢也就留下来了。</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/image-20241227002302821.png" alt="image-20241227002302821" style="zoom:25%;" />
<h3 id="冷冷冷">冷冷冷</h3>
<p>成都进入冬季温度进入个位数，作为一天除了睡觉都在电脑前面的人来说确实太冷了，在离开北京之前北京的温度其实和现在的成都差不多但是，因为白天大多数时间都在公司有空调，在出租屋里待得时间比较少没有这么明显，最近确实感觉这个手就是暖和不起来，特别是想玩会游戏的时候手都快没有知觉了，戴手套又不方便。和朋友开玩笑都说靠一身正气来御寒。</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/image-20241227002313088.png" alt="image-20241227002313088" style="zoom:25%;" />
<h2 id="要命的闹钟">“要命”的闹钟</h2>
<p>算是大学中一个比较重大的失误吧，考四级前有点失眠晚上1点多才睡觉，当时比较紧张，就把平时的闹钟改了一个时间换上了，而这个闹钟是之前在北京上班的时候定的（个人习惯一直在用第三个）没想到这个居然是一个工作日闹钟，而考试是在周末。当我睡醒已经8:59了四级要求8:30左右就要进考场。当时一下子穿好衣服，脑子就在想还去不去，但是当我在想自己去不去时我的心里就浮现了必须去，就算进不去考不了也要到考场让老师让保安当面给我说，不能放弃任何一次机会，虽然这次准备的也不好，本来还留了一些等到早起再看看呢。当时从起床到坐在教室花了5分钟，刚坐到教室就开始考试计时，我还在那儿喘着粗气（笑）。这也算是一个教训，做事很不认真。这个小细节没处理好，幸好这次是一个考试，还能在自己承受范围之内。</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/image-20241227003337720.png" alt="image-20241227003337720" style="zoom:25%;" />
<h2 id="秋招终章">秋招终章</h2>
<p>和朋友聊天。又去看看了最后离京前投了的一家公司的校招。发现流程差不多都终止了。看来这次秋招真的就是终章了，本次秋招前前后后大概投了一百多家，目前只有一家有面试，剩下的都是石沉大海，期间也请教了一些前辈对自己的简历进行了一些修改完善，当时每天晚上还在公司补一些面经但是现在看确实是有一些无能为力了。连面试的机会都没有，我对于春招并不抱太大的希望，秋招如此大量的hc都没有消息，在找工作人数更多的春招，我是不太乐观的。路虽远，行则将之，不知未来如何，但是什么都不做一定是不会有什么改变的！</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/image-20241227002516387.png" alt="image-20241227002516387" style="zoom: 50%;" />
<h2 id="观点小记">观点小记</h2>
<ul>
<li>
<p>一生中与你相处时间最长的就是你自己，如果连你自己都不重视自己的感受，那真的不会再有人站在你这一边了。所以在脑海里刻薄地自责，逼自己超负荷工作，或是拿自己和别人比较时，都是在帮别人一起残忍地欺负自己。你永远是自己生机勃勃的战友，而不是别人投射在你身上的幽灵。</p>
<ul>
<li>自责、逼迫自己过度努力，以及与别人比较，是一种对自己的“伤害”行为，甚至是在帮助外界压迫自己。你应该成为自己最强的盟友，而不是成为外界评价的影子或投射。</li>
</ul>
</li>
<li>
<p>你一点都不重要，你细想除了家人，谁会在意你，假设你死了，也没几个人会记得你。请必须记住，除了生死之外，你所感受到的一切情绪都是你的执着带给你的痛苦，而非真实存在，你的生活无非三件事，你的钱，你的健康，你的责任，而你的人生只有一件事，回归内心的平静，明心见性。在生活中，不要听压力就是动力，压力只能转换成病历，所以你的生活与人生的秘籍只有一个，那就是回归平静和安然的内心。人一旦看破本质，心态就变了，你随意，随你意，无所谓，没关系，一切OK。</p>
</li>
<li>
<p>有人说的对，思想深遂的年轻人会被思维限制了行动。因为他的灵魂走在了年龄前面。请相信这样一句话，如果你没有去亲身实践你所懂得的道理，当这样的道理你懂得越多，你就越割裂，就越无法走在人生的道路上。<br>
不要觉得自己的思想很深刻，思想是会随着进转而变化，**你需要弯腰去做一些你自以为已经懂得的小事，去成长，去积累，去接触，去身体力行的感受这个社会。**如果感觉思想停滞不前。那就说明一定是思想走得太快，你需要去等等你的身体需要去花费时间在实践上，然后你的思想才能更进一步，这二者永远是相辅相成的。</p>
<ul>
<li>在和chatgpt探讨后我认为有几个关键词，</li>
</ul>
</li>
</ul>
<!-- more -->
<pre><code>**避免拖延**：不要等到“我准备好再去做”，而是立即从简单的事情开始。

**接受失败**：实践中失败是不可避免的，但每一次失败都会让你更接近成功。

**注重积累**：行动不一定要很宏大，持续的小行动会带来长期的巨大变化。

无论是学习、工作、健康还是社交，真正的成长不是通过思考得来的，而是通过不断尝试、调整和积累实现的。可以从现在选择一件具体的小事去实践，让行动带动思想进步！与其等待“完美的条件”，不如立即行动！
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[弱口令总结]]></title>
        <id>https://zj4sun.github.io/post/ruo-kou-ling-zong-jie/</id>
        <link href="https://zj4sun.github.io/post/ruo-kou-ling-zong-jie/">
        </link>
        <updated>2024-10-30T02:49:20.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言">前言：</h2>
<p>这一周做了一个弱口令专项，之前没有做过，以为很简单，没怎么准备，但是后边结果不好，现在结束了，结合一下这段时间的心得和一些师傅文章的文章来总结一下，因为文章为项目完结后，所以图片都是来自别的师傅的配图，部分也是直接引用师傅的文章方便后期查阅学习。</p>
<h2 id="正文">正文</h2>
<p>在前期查看了一些攻略，但是还是低估了这次资产的数量和其他师傅的能力，第一天就交了7八个弱口令，而自己这边在网上找的很多自动化工具都因为各种环境问题不能使用。</p>
<p>弱口令专项无非web类和服务类</p>
<p>WEB类弱口令后台猜解：</p>
<ul>
<li>web类弱口令需要做充足的信息收集，找到后台入口进行密码猜解。</li>
<li>在弱口令枚举时可能会碰到验证码认证，此时可以使用一些验证码机器识别工具进行验证码绕过 。</li>
</ul>
<p>服务类-SSH&amp;RDP远程终端猜解：</p>
<p>如果是定向打击可以针对性的定制字典，但是如果是大范围扫描的话，只能用用一些通用的字典去试探。如：</p>
<ul>
<li>键盘顺序输入qwer@1234；</li>
<li>很多厂商会以厂商名缩写+@123或者厂商名缩写+年份等；</li>
<li>撞库，多个平台共用一个密码；</li>
<li>姓名+@+年份；</li>
<li>单位名称+@+年份；</li>
<li>系统默认密码；</li>
</ul>
<p>那么首先我们找到后台后，我们需要面对的是各种反暴力手段，包括不限于</p>
<ul>
<li>编码&amp;加密&amp;验签类（使用现有编码&amp;加密、使用自写加密、对数据包进行验签）</li>
<li>验证码类（图形验证码、滑动验证码、计算验证码等等）</li>
<li>错误次数限制类（根据单个用户名错误次数 根据总错误次数）</li>
<li>特殊登录方式&amp;多因素认证类（手机、邮箱验证码登录 qq、微信、钉钉扫码登陆等）</li>
</ul>
<p>那么首先如果是专项行动的话遇上这些显然不能直接去破解了需要针对性的采取采取措施去应对，L@2uR1te师傅在他的文章介绍的很细致针对各种常见的方式都有详细的讲解<a href="https://mp.weixin.qq.com/s/S4PEypIkM9648RqSYq1I8">文章地址</a>。本文主要是先讨论那些反暴力措施不严格的，能够直接暴力的。那么首先我们针对一个目标首先我们需要思考是账号密码同时爆破呢还是先喷洒呢？</p>
<p>那么首先要根据系统分为两种情况，一种是有返回包明显反馈的，另外一种是没有明显反馈的，例如统一返回“用户名或密码错误”。</p>
<h3 id="知道存活用户的喷洒-爆破流程">知道存活用户的喷洒-爆破流程</h3>
<p>针对这种情况，肯定是先喷洒再爆破，特别是一些老系统，他会在返回包中做出部分提示，包括不限与账户密码错误，不存在该用户等来佐证那些用户存在，后续也可以通过状态码和返回包长度来判断那些用户存在。比如最常见的通过长度和返回内容进行判断，这里我们假设第一轮用123456去进行喷洒：总之，大部分情况下密码正确、密码错误但用户名正确、密码和用户名都错误，三种情况会分别对应不同的返回长度或者不同的响应内容（有时候也会对应不同的响应码），多注意即可。这里值得重点说明的一种情况就是，假设返回长度、状态码都一样或者很类似，但是响应内容不同，我们喷洒了几万个用户名，总不能一个个点开去看结果吧？这种情况我们要怎么去筛选存活用户呢？可以根据返回包具体的特征，使用burp的这种情况可以借助Grep -Extract功能，我们注意到代表用户是否存在的响应内容是放在某个标签内的，可以借助这个功能做匹配。很多时候登录接口做了处理，返回“用户名或密码错误”，且无法通过返回长度、响应码进行判断的时候，可以另寻别的接口尝试对用户的存在情况进行判断。实战环境里不只能用登录接口去判断用户的存在情况，还有一些比较常见的例如如果开放注册用户接口、修改密码接口，判断用户存在基本一找一个准。也可以使用findsomething看看有没有比较未授权的一些接口来辅助判断。</p>
<h3 id="不知道存活用户的喷洒-爆破流程">不知道存活用户的喷洒-爆破流程</h3>
<p>那么遇到最多的情况，应该就是无论是用户名不存在，还是用户名存在但密码错误，统一返回“用户名或密码错误”。这一类系统最为头疼，在这次专项行动中，针对这类系统采用的是采取少量手工尝试，产生了几个就跳过。这一部分看了一些师傅的思路基本上也是少量字典交叉爆破，最好准备一些量级不大的精品字典交叉爆破。这里我也准备了一下字典目前是3500*10大概3w多次尝试，同时还有可以在用户名字字典后边加上123，如果反暴力不严格的话也可以先用大量字典和少量字典尝试</p>
<p>之所以有这一步，是我发现实战中有些站点生成用户后，喜欢把用户的密码设置成用户名拼音+123，有时候还会设置成密码就是用户名，还有很多用户在设置自己密码的时候就是很喜欢用户名拼音+123的规则，所以我在实战中多加这么一步真的出过不少洞。而且也不只是拼接123，还可以试试下面这些密码规律结合用户名字典去做喷洒：</p>
<pre><code>用户名+@123 用户名+@年份 用户名首字母大写+@123
</code></pre>
<p>可以让喷洒成功率提高很多。</p>
<h3 id="特殊情况之手机号作为用户名">特殊情况之手机号作为用户名</h3>
<p>这种在这次专项行动中，没有发现明显提到需要用手机号登录的，但是也有尝试，这里我选择使用的是手机号生成工具非常好用，如果是一个地方系统可以生成当地的手机号,这样也挺不错的，能够很好的提高出货的效率。<a href="https://github.com/asaotomo/makephonedict">makephonedict</a></p>
<p><strong>.特殊情况之邮箱作为用户名</strong></p>
<p>这种情况就更有意思了。这种情况我喜欢先确定目标公司的企业邮箱是什么，一般都和他们的主域名有关。比如某知名视频网站bixxbixx.com，企业邮箱大概率是@bixxbixx.com，这些爱企查都很好查的。我们在针对使用邮箱作为用户名的情况时，实际上可以在我们用户名字典的基础上直接拼接一下目标的企业邮箱后缀，比如：</p>
<figure data-type="image" tabindex="1"><img src="https://mmbiz.qpic.cn/mmbiz_png/2A06BE6JXgZkPHvK8XKKaIa5qS63wa6gOsCrO4HvnKUsicDyFq6OB732IWm4rwoNYj0mcPia6yIB1GcO80FcXNew/640?wx_fmt=png&amp;from=appmsg&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy"></figure>
<p>这样基本也能去找到很多邮箱用户名，因为大部分企业邮箱的规律也就是 员工姓名拼音+邮箱后缀。</p>
<p>如果你并不满足于此，实际上还有一些网站可以找目标相关的邮箱，例如</p>
<pre><code>https://phonebook.cz
www.skymem.info
https://hunter.io/
</code></pre>
<p>等等</p>
<figure data-type="image" tabindex="2"><img src="https://mmbiz.qpic.cn/mmbiz_png/2A06BE6JXgZkPHvK8XKKaIa5qS63wa6g6zlDvgKS5UOQZc6oBKES5FIutDNxLIaILkT2MicMWliamYibjUOBnrrVQ/640?wx_fmt=png&amp;from=appmsg&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy"></figure>
<p>同理啊，目标的“联系我们”相关界面也是有可能有邮箱相关信息的</p>
<figure data-type="image" tabindex="3"><img src="https://mmbiz.qpic.cn/mmbiz_png/2A06BE6JXgZkPHvK8XKKaIa5qS63wa6gsNRDnkn0Csiauwp8vWEAS1C843SwEAicst8HFJtKSvqkuPBubGJeUefA/640?wx_fmt=png&amp;from=appmsg&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy"></figure>
<h2 id="总结">总结</h2>
<p>本次弱口令也给我了一些启示，面对大量资产如和快速产出，如果一个一个的手工测试或者半手工，那样能有什么产出呢？我想应该有爬虫工具，目前自己没有找到一些合适的工具，所以给自己埋一个坑吧，后边自己写一个。这次行动也让我意识到本地字典的重要性，字典这个东西，需要自己不断跟新，如果临时去找可能会有诸多限制，所以借着这次机会也帮我完善了一些自己的本地字典。</p>
<h2 id="参考文章">参考文章</h2>
<p>感谢以下师傅的文章帮助，都是非常值得观看的文章</p>
<p><a href="https://mp.weixin.qq.com/s/3ryYB4zDzLu9qgSnN69YxQ">一些提高密码喷洒与爆破出货率的小技巧</a></p>
<p><a href="https://mp.weixin.qq.com/s/S4PEypIkM9648RqSYq1I8w">爆破及喷洒过程中与常见限制机制的对抗思路</a></p>
<p><a href="https://sm0nk.com/2017/12/04/Web%E6%94%BB%E9%98%B2%E4%B9%8B%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3-%E4%BD%95%E8%B6%B3%E9%81%93%E7%89%88/">Web攻防之暴力破解(何足道版)</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2024年第三季度总结]]></title>
        <id>https://zj4sun.github.io/post/2024-nian-di-san-ji-du-zong-jie/</id>
        <link href="https://zj4sun.github.io/post/2024-nian-di-san-ji-du-zong-jie/">
        </link>
        <updated>2024-09-30T06:08:10.000Z</updated>
        <content type="html"><![CDATA[<h2 id="7月">7月</h2>
<h3 id="大哥的奶茶">大哥的奶茶</h3>
<p>工作日的一天下午，大哥给我们派活，临近下班，大哥看我们事情可能还是要做一会，给我们每人点了一杯奶茶。当时还和身边的同事说，大哥的奶茶是加班的信号。虽然当天确实加了快一个小时的班（对我而言），但是周围同事关系氛围很好，同事实力也很厉害，目前工作上没有什么太大的难题，在没有工作的时间，也在抓紧时间学习，争取在秋招能够有一个好点的出路。</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202407051759594.png" alt="image-20240705175905157" style="zoom:10%;" />
<h3 id="望京望江">望京，望江</h3>
<p>初到北京，很多朋友都关心我近况如何。这天和小h交流时，不经意聊到公司在望京，没想到她在望江，些许巧合。一个忙着去工作实习技能经验，一个在抓紧时间去学习知识，避开外部的干扰，去学习深造。貌似每一个人都有不可放弃的理由，都想着在这段时间能够不断地提升自己，或是向旁人证明，亦或是想自己证明！无论结果如何，相信这段时间都能够在彼此的人生路上留下弥足珍贵的记忆。相顾无言，唯有祝愿！</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202407051800439.png" alt="image-20240705180058292" style="zoom:15%;" />
<h3 id="天安门">天安门</h3>
<p>周末放假和几个朋友来北京城里转转，去感受一下北京作为全国政治中心，文化中心。之前就看到北京是一个不太适合步行的城市，里面的建筑太大、到了北京实地体验之后确实发现，太大了，一个景点就可以慢慢逛很久，加上暑期旅行旺季，来北京的人特别多。来天安门这儿本来想看看降旗，但是因为没有预约只能坐公交路过，通过这种方式来看看天安门吧。</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202407180949337.png" alt="image-20240718094927899" style="zoom:15%;" />
<p>这天还去了天坛公园，看到这古代皇室的东西确实壮观，连屋顶的瓦都是玉石，建筑端庄大气，公园里面很多东西都看的出历史的痕迹。冬至日祭天的“圜丘坛“周边的道路早已坑坑洼洼，一些石头雕塑也有破损，恍惚间有一种岁月流逝的感觉，几百年的历史就从眼前流过，朝代更替，时光流逝，它一直在这，但是来看的人在变化。</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202407180950645.png" alt="image-20240718095000011" style="zoom:15%;" />
<h3 id="挤地铁">挤地铁</h3>
<p>北京的很多地铁线路一直都是人潮涌动，每天上下班都是挤地铁，只能用挤来形容了，好几次都是这种贴着门，趴在门上站几站才能够送一点。不知不觉间，已经感觉能够一趟挤上去都是一种幸运，普遍都要等一趟地铁，才上的去车。这种生活不是我想要的，但是没有办法，只能先去该做的，再去做想做的。乘着自己还年轻，多去丰富自己的阅历和经验吧，能够去早点获取到自己想要的生活</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202407180949772.png" alt="image-20240718094949188" style="zoom:15%;" />
<h3 id="午后">午后</h3>
<p>一个温暖的午后（虽然外边很热，虽然这个已经是下午五点多了）</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202407180950842.png" alt="image-20240718095011502" style="zoom:15%;" />
<h3 id="鸟巢">鸟巢</h3>
<p>这天下班，亲戚带我去吃饭，饭后骑着小摩托车，带我去奥利匹克公园附近转了一圈，去看看了晚上的鸟巢水立方等等，当我切身站在 这些建筑面前，看到了之前在电视上才能看的建筑，心里确实是一种震撼</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202407180950614.png" alt="image-20240718095023912" style="zoom:15%;" />
<h3 id="火锅">火锅</h3>
<p>一个惬意的周末，突发奇想要不迟钝火锅吧，于是第二天，就去买材料，因为没有很多原材料，加上又是一个人吃的很简单，，但是味道确实很不错，和在家里煮火锅是一个味道。这也算是我在北京来了，自己弄的最好的一顿了，有肉有菜的，当时想着如果不是在北京，自自己不是一个人那又该多好，和好朋友们一块吃着饭，聊着天。</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202407310914028.png" alt="image-20240731091413299" style="zoom:15%;" />
<h3 id="雨">雨</h3>
<p>到北京这边感觉天气就是很极端，要么特别热，要么就下大雨。7月下旬下了好几场雨，如果不上班，是最喜欢下雨，天气凉飕飕的，但是感觉北京这边下雨天气并没有变得凉爽，大多数时候还是闷闷的，当我上班之后，就最讨厌下雨，如果是在上班的路上下雨，就得穿拖鞋，一旦鞋子打湿了，就得湿脚穿一天。如果是下班路上，基本上没有准备话就得淋着回来。</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202407310914314.png" alt="image-20240731091420806" style="zoom:15%;" />
<p>这天下雨，因为公司安排第二天去某单位开会，所以就把公司电脑带上了，结果刚走到楼下，就下大雨。自己淋湿了没关系，可是不能让公司电脑琳坏了，本来想去超市要几个口袋的，却发现这个大超市，就然没有供自己打包的塑料袋，就去收银台买了两个口袋，两口带居然要两块，也是第一次看到这种这么贵的塑料袋，当时也是苦笑一下，如果不好好工作挣钱，以后连买塑料袋都得思考一下了。</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202407310914931.png" alt="image-20240731091427538" style="zoom:15%;" />
<h3 id="一个创业者的故事">一个创业者的故事</h3>
<p>无意间刷到影视飓风的tim在23年讲述自己的创业者之路的混剪，感觉很有意思，就去b站上找到了原版，半小时去看了看，确实有蛮多不一样的感触的，影视飓风也是我一直关注的一个up主。从我们观众的角度并不会看到，内容优质，更新频率稳定的博主，甚至还新装修了一个办公地点，会在发展过程中遇到的那么多问题，这也是我第一次跟随他的视角去看到一个初创公司在发展过程中遇到的问题。也是对于创业，对于管理有了不一样的感触。通过优秀的文字和布景，我们很容易就跟随他的视角，仿佛自己就置身在那一场变革中。</p>
<p>tim在公司第一次遭遇重大危机的时候向他的父亲请教的时候，他父亲给他的建议：我也是明白了一个优秀的企业家创业者，是一定拥有不一样的眼光和敏感度，能够一针见血的指出关键。</p>
<p>1.盲目换人从来不解决本质问题 2.有效量化，降低信息差，是企业运作的核心 3.人性是经不起挑战的，商业，是切蛋糕的艺术</p>
<p>这也让我想到自己在公司实习的这段时间，公司的一个决策失误，可能会导致几十上百万的损失，那么这些会直接反馈到公司的运营上，也许昨天你还在和同事谈笑，第二天就收到了辞退通知，如何能够稳定的去提升自己？我想就是不断提升工作通用技能点，提升工作效率，积极拥抱前沿技术，拥抱变革。时代的一粒灰，落到个人头上就是一座山，甚至不需要时代，一个公司的落幕，背后可能是许许多多的家庭需要翻阅的大山。那么现在正在自己的黄金时代，我想只有去勇敢的面对，不断提升自己抗风险能力，勇敢面对！</p>
<blockquote>
<p>沉舟破斧的勇气永远是解决的问题的关键</p>
</blockquote>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202407310948230.png" alt="image-20240731094814942" style="zoom:15%;" />
<h2 id="8月">8月</h2>
<h3 id="中年危机">中年危机</h3>
<p>7月最后一天，我看到了写了一个创业者的故事章节，结果在8月的第二天我就得知自己的大哥被裁员的消息，说实话得到这个消息我是呆住的，大哥曾开玩笑说一百多份简历中选出了我和另外两个小伙伴组成现在的团队，结果没想到刚来公司一个月自己的大哥被优化掉了，大哥对我来说算是一个引路人把我拉到公司来，在很多方面给我了我很多照顾，算是有知遇之恩，后续会和大哥吃个饭去聊聊这些事，周五下班前，其实自己也蛮有感触的，一种危机感，大哥在公司呆了8年，据说工资待遇蛮不错的，公司也很聪明，当你的价值对不上你的薪资，那么你就是被淘汰的那一批人，对于互联网行业除了管理，鲜有超过35岁的从业者，虽然我才还没毕业，但是后边这个问题可能会逐步严峻的，行业内经验确实很重要，但是经验丰富也意味着人力成本更高，那么公司对于你的价值会更加认真的评估，如果能够替代，那么你必然会被更年轻更有价值的人替代。<strong>人性是经不起挑战的，商业，是切蛋糕的艺术</strong>。公司里边是不讲人情的，每一个人都被明码标价，不合适就会被淘汰。撑着现在还年轻要开始构思人生的一些路线，争取逐步分担风险，加油，共勉！</p>
<h3 id="金碧辉煌">金碧辉煌</h3>
<p>一天下班看到阳光刚好照射到附近的大楼上，显得大楼有一种金碧辉煌的感觉，突然就想到之前看到的一段话，这里是北京，你以为你是金子，可这里到处都是金子，这里本来就是金碧辉煌。和同事交流他也说，后边不会来秋招和工作不会来北京了，他给出的理由是北京人太多了，人才太多了。是啊，这里可是北京，一座金碧辉煌的城市！</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202408132233704.png" alt="image-20240813223339134" style="zoom:15%;" />
<h3 id="他乡遇故知-圆明园">他乡遇故知。圆明园</h3>
<p>王总接到出差任务来北京出差，感觉有点神奇，没想到这么快又见面了，但是没想到两个人都在千里之外的北京，颇有些奇妙。出差那段时间当rd无休，所以乘着还没开始，在北京转转。恰好那天的天空特别好看，在北京蓝天白云很是少见，那天特别晴朗，也是去圆明园看了一圈。</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202408132234569.png" alt="image-20240813223415852" style="zoom:15%;" />
<h3 id="离别终有时">离别终有时</h3>
<p>同事提离职了，刚好有机会，就一块吃了一顿饭。期间聊了很多了，几个年轻人，对于未来都有着无限的期待！</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202408132234620.png" alt="image-20240813223425875" style="zoom:15%;" />
<h3 id="雨-2">雨</h3>
<p>北京的天气我感觉是最古怪的，可以上一秒晴天，一会就大雨倾盆，可能北京这边离海边比较近气候变化什么的比较迅速，云散飘的比较快，一块大乌云来了就下场大雨，在四川的时候一场雨甚至能延绵几周，就是下不大但就是会下。</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202408132235936.png" alt="image-20240813223515475" style="zoom:15%;" />
<h3 id="心碎的早晨">心碎的早晨</h3>
<p>一个赶着9点打卡的打工人，买完早饭想去骑车，发现早饭掉水塘里了。</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202408132235012.png" alt="image-20240813223525333" style="zoom:15%;" />
<h3 id="一碗臊子面">一碗臊子面</h3>
<p>周末时间一般都会自己煮东西吃，最近煮面开始加肉了，之前都是只加蛋和菜，现在发现还是多得吃点肉，于是开始做臊子。但是物资太小又没有冰箱，所以目前还是只能用肉末和鸡腿来做饭，锅也只有一个还只能煮东西吃，后边长期待北京可能会改善以下设备</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202408132235985.png" alt="image-20240813223535364" style="zoom:15%;" />
<h3 id="信任危机">信任危机</h3>
<p>一天和领导吃饭的时候他们聊到一个词”信任危机“这个词挺有含义的，听到他们几个分析，发现了很多事情确实也是很开拓自己的想法的。人们几乎质疑一切，从吃的、用的，甚至医药、娱乐，乃至于我们的体制和政府官员的信誉等等，同时相对的政府，机构也对于民众抱着质疑的态度。</p>
<blockquote>
<p>不过，尽管所有的权力都要求诚信为本， 但其执掌者是否如此则另当别论。当政府以国 家的统治者和创造者自居时，它必然将公民视 为臣民( subject) ，现代国家所应有的主仆关系 因此就回到了过去，指鹿为马的事情就经常发 生了。 统治者在表面上都声称代表“人 民”———如希特勒就自封为人民的“领袖”——— 但是否信任人民则是另一回事。那些最喜欢把 人民挂在嘴上的政权，往往都坐拥庞大的国家 机器，监控着民众的每日生活。正如福科( Foucault) 指出的那样，权力运用理念和现代政治 理性设计使每个人无助地成为被监控的对象与 主体( subject) ———被控制、依靠的同时，也被某 种意识和自我认识捆绑在自己的认同上。［13］① 如此之权力在本质上对民众怀着敌意，在这样 的条件下，政府与公民的互信无异于痴人说梦。</p>
</blockquote>
<blockquote>
<p>在高压的政治体制 下，人人都在做戏，差别在于，有些人是有意识 地做，更多的人则是无意识地做———极权体制 持续不断的政治操演使绝大部分人失去了自 我。信任，在这样的氛围里，完全是欺人之谈</p>
</blockquote>
<blockquote>
<p>危机也意味着转机，意味着置于死地而后生， 如何捉住这一转机，是决策者和民众共同的任务。</p>
</blockquote>
<blockquote>
<p>极权政治下的所谓信任其实就是 一种权力关系，你要“有权”就被信任!</p>
</blockquote>
<blockquote>
<p>我们曾经经历过的高压政治的折射和遗谬，说明的是在制度的建立上和 国家治理上，执政者看问题尚未从统治者或者管 辖者的立场转变到治理者或者协调者的立场</p>
</blockquote>
<p>诚然这些文章分析独到深刻，但是并未提到具体的解决方法和方式，我们身为社会最小单位，也无法去纠正改变这一历史规律和风气，但是能够从自己出发，提升自己对待事务的分析能力，认真思考自己，社会，当权者的关系。得人心难失人心易。很显然，更高的信任度让人们对于政府和企业有了更大的期望，希望他们能够尽己所能应对社会时间，构建更具韧性的体系来应对未来可能的事件爆发。</p>
<blockquote>
<p>当下，我们正处于消费者重新考量其客户忠诚度的早期阶段。如果现实情况确实如此，那么各大品牌必须尽快行动起来，通过转变消费行为和消费模式将品牌价值充分传达给消费者。在消费者心目中，以家庭和社区为核心的价值主张更为重要，而达成这一社会契约的品牌也就取得了转型的成功。</p>
<p>政府也面临同样的困局。无论是像韩国那样深得民心，亦或是像日本那样陷入困境，各国政府都希望在后疫情时期能够拥有更强的力量和支持。干预不足，则会被诟病玩忽职守；施政过当，则会被指责言过其实：一路走来容不得分毫行差踏错，最终才能实现微妙而脆弱的平衡。</p>
</blockquote>
<p><a href="https://www.edelman.cn/insights/2020-trust-barometer-springupdate">短暂的信任危机，还是社会的重新洗牌？</a></p>
<p><a href="https://sociology.nju.edu.cn/_upload/article/files/b2/e1/6d96e374419faf2c2a868333042d/a2b8ba51-ea6f-40f6-8e8b-fc2e5855e200.pdf">关于信任与诚信的人类学笔谈2013年</a></p>
<h3 id="托举">托举</h3>
<p><a href="https://www.douyin.com/video/7403003420510145855">视频</a></p>
<p>托举，近段时间看到了这个词，感觉很有意思。博主应该是初为人母</p>
<blockquote>
<p>我体验过无人帮衬的难<br>
我不想让我的孩子经历一次<br>
给儿女留家产不是为让后代啃老<br>
一是为了保障衣食无忧有精力做其他事<br>
二是自己有一个新的起点<br>
以后当别人还在为了彩礼房子车子<br>
精疲力尽的时候<br>
儿女可以追求自己的梦想和事业<br>
因为父母给的起点就不同<br>
我们这么努力<br>
就是为了孩子能有一个更好的起点</p>
</blockquote>
<p>选择要子女，愈发感觉得这是一种责任，你可以选择两个人快活的过着生活，不要子女，但是我想如果真的选择要子女了，一定时要有一种责任，你给予了他的是独立的生命，并非附庸。他应当可以选择自己的生活，自己的小时候因为家庭的原因，能够自己的选择的机会不多，或许些许遗憾，但是我并不埋怨我的父母，他们已经在他们的能够做到的已经给了我很多了，甚至远超很多人，所以我始终对他们心存感恩，对于我那么遥远且位置的孩子，我想我能够做的是，就是在你出生之前尽可能做好准备，能够让你有更多的选择的机会，不会让你处处受限。以前年少时，常抱着父母都没好好努力我还那么努力干啥，甚至有时会将这个思想附加到自己的面对子女的态度上。现在看这是是不负责的，起码没有担当。我想一代人有一代人的使命，一个大家族的大家庭的兴旺都是代代积累，给他留手足  不如给他留富足   最大的恩情不是生恩而是托举</p>
<h3 id="价值">价值</h3>
<p>记录一个很有意思的想法：</p>
<p>人性都是很恶心的，任何人不会因为你爱他而来爱你，对方只会因为你的优秀来爱你，你的价值就是你的一切，很少有纯粹的好人与坏人，只要自己有底气和能力，才能配得上更好的，当然，你什么都没有的时候，你就没资格去选，所谓的爱情，其本质就是利益的交易，男性看上女性的，不外乎美色价值，生育价值，保姆价值，女性看上男性的，不外乎生存价值，经济价值，智慧价值，没有人愿意去扶持一个毫无价值的人，所以无论任何时候都需要经营好自己，就算是跌入谷底，也要有交换的筹码，话很现实，不符合理想主义，但符合事实，爱情应该真正建立在生活坚实的基础上</p>
<h3 id="好的选择">好的选择？</h3>
<p>因病情恶化，祖母已脱离人间痛苦，去天堂享受一个健康的人生。这个并不是好的选择，可多年的痛苦，这何尝不是一个好的选择？面对亲人我常觉亏欠。以前总是将太多爱当作理所以当，近些年才意识到，很多人已经进入生命的倒计时？若生前不好好陪伴，孝敬。当成为一座小土包，再多的言语，再多的感情，再多的金钱又向谁说又有什么用？正如去年所提到生命中有很多事情比钱更重要。明天总是未知的，面对身边的人真的且行且珍惜！</p>
<p>奔丧的时候，父亲让我给奶奶写一篇讣告通知亲友。再次记录下来，用于铭记！</p>
<pre><code>亲爱的家人、朋友们，

怀着无比沉重的心情，我们不得不向大家宣布一个令人悲痛的消息：我们敬爱的母亲周女士，在2024年8月25日（农历七月二十二日），因病离世，永远地离开了我们。

母亲生前以其慈爱、坚强和乐观的品质，给予了我们无尽的力量和勇气。她的生活态度和行为一直是我们学习的榜样，她的精神和爱将永远激励着我们前行。

虽然我们深感悲痛，但我们知道母亲希望我们能够坚强和乐观地继续生活。她将继续在我们心中闪耀，引导我们走向未来。

告别仪式将于2024年8月29日（农历七月二十六日）在xx举行。我们诚挚地邀请您来参加，与我们一同缅怀母亲的生命，并向她表达我们最深的敬意和怀念。

在此，我们也想对所有关心和支持我们的亲朋好友表示最诚挚的感谢。您的慰问和支持对我们来说意义重大。

母亲，愿您在天堂安息，您的爱和智慧将永远铭记在我们心中。

此致
敬礼！

儿子：张
儿媳：董
2024年8月27日
</code></pre>
<p>祖母从小照料我，可以说陪伴了我的整个前半生，面对她的离世，满是不舍！可病发的痛苦，一声声哀嚎牢牢的刺激着每一个子女的心，多少次又想她能够拜托人间疾苦，可始终亲情连接，少有人能够理智下去。鲁迅先生说过死者倘若不埋在活人心中，那就是真正的死掉了。我将会在近期写一篇文章来悼念祖母，并将它永久保存，用于铭记。祖母，愿您在天堂安息！</p>
<h2 id="9月">9月</h2>
<h3 id="坚冰还盖着北海的时候我看得见了怒放的梅花">坚冰还盖着北海的时候，我看得见了怒放的梅花</h3>
<p>一天夜里在公司待到公司待到九点多快到家的时候已经快十点了，拍下了这张照片，不知道未来如何，但是现在我想我得坚持下去</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202409162048590.png" alt="image-20240916204851339" style="zoom:25%;" />
<h3 id="去中心化">去中心化</h3>
<p>最近这个 词听到的很高频，来聊聊和写写。先来看看定义，去中心化是一种现象或结构，其只能出现在拥有众多用户或众多节点的系统中，每个用户都可连接并影响其他节点。通俗地讲，就是每个人都是中心，每个人都可以连接并影响其他节点，这种扁平化、开源化.平等化的现象或结构，称之为“去中心化&quot;。去中心化首先体现在多样化上，在网络世界不再是有几个门户网站说了算，各种各样的网站开始有了自己的声音，表达不同的选择，不同的爱好，这些网站分布在网络世界的各个角落里张扬着个性。去中心化其次体现在人的中心化上，去内容中心化成为趋势，人成为决定网站生存的关键力量。以缺乏互动的个别人建站变成了以圈子的形式来聚合人才贡献自己的智慧，这是个巨大的变革。即用户为本，人性化。以前的人们所熟知的一个公众人物往往都是依靠一定渠道进行过大量推广的人物形象，但是在自媒体时代，每个人好像都有一个发声渠道，每个人参与其中的人好像都有一个曝光的机遇，对我来说这是一个机遇吗？我想应当去试试吧，思考一个赛道，然后去尝试着看看。去中心化，不是不要中心，而是由节点来自由选择中心、自由决定中心。简单地说，中心化的意思，是中心决定节点。节点必须依赖中心，节点离开了中心就无法生存。在去中心化系统中，任何人都是一个节点，任何人也都可以成为一个中心。任何中心都不是永久的，而是阶段性的，任何中心对节点都不具有强制性。</p>
<h3 id="探索极致">探索极致</h3>
<p>今日无事，看到北京有国家地理的展览，于是购票准备去看看，但是最近晚上一直在干学习进度，所以一直没有时间，趁着中秋节，去看了看，算是极大的丰富我的视野。</p>
<p>​                                                                                         <img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202409162103807.png" alt="image-20240916210313511" style="zoom:25%;" /></p>
<p>第一张吸引到我的就是这个巨树的房客，巨树上面”住“着许许多多的房客，我想他们大多都是寄生关系吧，一个庞大的系统上面有着各种形形色色的居住者，大家一荣具荣一损俱损，个体的衰亡好像并不会掀起什么大波浪，但是对于巨树而言它要是有什么风吹操作，可能对于这些房客，就是天大的事。前几天看到一句话，在职场中，要不断提高自己的权限，我想本意也是成为这样一棵巨树吧。</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202409162049763.png" alt="image-20240916204810062" style="zoom:25%;" />
<p>一副个人感觉很美的图片，一种远山的雄伟，近处的鲜花点缀和那盛开的雪莲，一副佳作</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202409162048431.png" alt="image-20240916204846351" style="zoom:25%;" />
<p>出了展览发现国贸就在旁边不远，就过去看看了看国贸，看到了中国尊和央视大楼（晚上光线不好没附图片），一栋栋或是高耸入云的大楼，或是颇具风格的楼体，边上还有北京skp，一路全是奢侈品店，这里的消费或许是现阶段的我无法想象的，北京是一个很神奇的地方，他有着高档的写字楼，世界一流的商场，但是与他直线距离不到20km就是一望无际的外来打工居住区，或是村上的平房，或是便宜公寓。我和这些外来务工者一样，住着简单的出租屋，看到这些心中不免有了对比。最近有一句话我一直反复回味，“当你真正自由的时候，你应当怎么活？”我现在的状态或许已经接近自由，这个问题或许是我应当去逐步思考！共勉~</p>
<h3 id="雨过总会天晴">雨过总会天晴</h3>
<blockquote>
<p>毕业后的很长一段时间我都觉得自己只要乐观 就永远不缺面对一切困难的勇气 就算一个人找工作四处碰壁 一个人生活危险重重 一个人做很多很多事情 但可能就是突如其来的大雨 忘记带雨伞 看着大雨的瞬间才发现自己原来真的已经长大有些事情也再也回不去 心里难免有一丝凄凉 变成自己想象中的大人 但幸好我不无聊笑着调侃自己 我觉得也算是一种本领<a href="https://www.douyin.com/video/7412940527844265256">链接</a></p>
</blockquote>
<p>无意间看到这个视频，蛮有感触的，离开学校有3个月了，也开始独自的生活去面对未来，还记得七月份下着大雨，不想去买伞，去商场买了两塑料袋的故事，当时两个塑料袋收了我2块，我现在都记着，不由得感慨啊，几个月我还在学校里面，每天看着课表去上课，去生活，无忧无虑，父母每个月打着生活费，现在看好像已经是很久以前的事情了，但是现在看也才过去3个月。和视频的作者一样，心里其实或多或少有一份凄凉，也不知道是否变成了自己想象中的大人呢？</p>
<h3 id="云淡风轻">云淡风轻</h3>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202409302031892.png" alt="image-20240930203152355" style="zoom:15%;" />
<p>这一个月拍了不少北京的云，很好看，很吸引我，吸引我的真的是北京的云吗？整个9月除了工作上的事，我基本上在补知识点和准备秋招。9月中旬投了快20家，目前没有一家有消息。目前来看可能简历除了点问题，还依稀记得在三个月前我来到了北京，当时给自己的安排是，9月就回成都，可是当自己真的面对的时候，才发现自己在很多方面并没有做好准备，我真的想要回四川吗？这个问题我问了自己无数次，我都很坚定的回答，会！就算北京在北京待，也会在未来的几年内回到四川，自己的心好像不属于这里，就算这里有着很多岗位，有着很多机会，可是我始终不能全然的抽出来，不知道以后是怎样，至少现在是这样。朋友前几天给我推了一首赵雷的理想。当时我听了20多遍，确实蛮切我的情绪的。从7月的迷茫，到现在可能对于未来的计划也渐渐明朗了，不出意外的化应该是准备留在北京了。在这待多久呢？三年？五年？我不知道。</p>
<figure data-type="image" tabindex="1"><img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202409302047361.png" alt="image-20240930204723333" loading="lazy"></figure>
<p>今天看到一篇文章，作者提到</p>
<pre><code>我是四川人，在成都读的大学，但是我毕业就去了北京，在去北京之前，我对“北漂”这个词是没什么体会和感受的。
直到在北京待了三年，才能感受到“北漂”这个词的含义。那确实是一种孤零零的感觉，就像是一片落叶，虽然身边有要好的同事朋友们，但是你知道你不属于这里，你只是随风飘落。和部分“北漂”不一样的是，别人“北漂”是为了留下，在北京生根发芽，我&quot;北漂&quot;是为了离开。
</code></pre>
<p>那么我像我应该去想想自己到底要待多久？我想我自己想要什么？去做什么可能现在都还没有想明白吧？9月即将过去，所有的事情就留在9月吧，接下来的10月我想我要去思考这些问题了。<strong>真正云淡风轻的尽头是幸福</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python爬虫学习笔记]]></title>
        <id>https://zj4sun.github.io/post/python-pa-chong-xue-xi-bi-ji/</id>
        <link href="https://zj4sun.github.io/post/python-pa-chong-xue-xi-bi-ji/">
        </link>
        <updated>2024-09-23T10:14:33.000Z</updated>
        <content type="html"><![CDATA[<h1 id="python爬虫">python爬虫</h1>
<h2 id="前言">前言</h2>
<p>之前突发奇想看过一些文章和视频来学习爬虫，但是都是囫囵吞枣没有深入实践和总结，这次借着js逆向爬虫这个课程，来系统学习并总结一下自己学的python爬虫吧。在这里记录下自己的学习笔记和心得，方便自己日后查阅，本文部分内容来自课程老师的笔记。根据自己的学习习惯本文采取的是实用主义，需要什么学什么。</p>
<h2 id="正文">正文</h2>
<h3 id="前置基础知识">前置基础知识</h3>
<p>能够学习到爬虫基本上默认你有一定的python基础，至少电脑有明白python的基础类型，对于任意一种语言有学习过流程控制，同时能够简单的实现print(),文件操作。那么这里只需要简单提及一下我们需要使用的python基础的数据结构和文件操作。</p>
<pre><code class="language-python">#pip安装依赖
pip install pyppeteer -i https://pypi.tuna.tsinghua.edu.cn/simple
# 第一个知识点，在python中，或者说所有语言的的数据类型中索引取值和切片取值都是一个很常见的知识点
s = &quot;hello yuan&quot;
print(s[6])
print(s[1:4])
#列表中可以存储任意类型的数据
#第二个知识点，编码
#- 计算机只能处理数字01，如果要处理文本，就必须先把文本转换为数字01二进制的形式，这种转换方式就称为字符编码。
#对于我们而言，你只需要简单记住下面几种编码就好：
# - ASCII编码：早期专门为英语语系编码，只有255个字符，每个字符需要8位也就是1个字节。不兼容汉字。
# - Unicode编码：又称万国码，国际组织制定的可以容纳世界上所有文字和符号的字符编码方案。用2个字节来表示汉字。
# - UTF-8编码：为了节省字节数，在Unicode的基础上进行优化的编码。用1个字节表示英文字符，3个字符表示汉字。天生兼容ASCII编码，所以最为流行。
# - GBK： 全称《汉字内码扩展规范》，向下与GB2312兼容，向上支持ISO10646.1国际标准，是前者向后者过渡过程中的一个承上启下的产物。windows中文版的汉字编码用的就是GBK。也非世界范围通用的编码
# - 其它编码：非以上类型者的统称。属于能不用就不要碰的编码。
#因为爬虫的特殊性质,我们会对文件,网页进行处理,所以编码这个是我们需要注意的一个点
#第三个知识点 数据结构

    #列表中可以存储任意类型的数据,基础操作 增alist.append()  删alist.pop() 改按照下表直接赋值 查 print(s[1:4])
    alist = [1,2,3,4,5]
    items = [1,'bobo',12.34]
    #字典的实现机制：Python的字典数据类型是基于hash散列算法实现的，采用键值对(key:value)的形式，根据key的值计算value的地址，具有非常快的查取和插入速   度,不是序列类型，因此没有索引下标的概念，更没有切片的说法。字典中无法存储重复的键值对
    dict_1 = {'name':'bobo','age':18,'score':100,'age':18}
    #注意：不要在字段中存储相同的key，value可以相同
    dict_2 = {'name':'bobo','age':18,'age':20}
    print(dict_2)
    d = {'name':'bobo','age':20,&quot;scores&quot;:[100,120,99]}
    d['name'] = 'jay' #给存在的key修改对应的value值
    d['address'] = 'Beijing' #给一个不存在的key赋值表示新增键值对
    del d['age'] #删除age键值对
    print(d)
#流程控制
if 表达式：
    代码块 1
else：
    代码块 2
while true:
    循环体
for 迭代变量 in 字符串|列表|元组|字典|集合：
  代码块
#文件操作
with open('name.type','w') as fp:
    fp.write(page_text)
</code></pre>
<p>html</p>
<p>day前端无状态部分</p>
<h3 id=""></h3>
<p>当我们明白了上边的一些知识点后,我们就可以尝试写爬虫来尝试学习,正如主席说过,在战争中学习战争,我们通过不断的练习,来完善我们的知识点.引用路飞老师的笔记内容</p>
<ul>
<li>什么是爬虫
<ul>
<li>就是通过编写程序，“模拟”浏览器上网，然后让其在互联网中“抓取”数据的过程。
<ul>
<li>模拟：浏览器本身就是一个纯天然的爬虫工具。爬虫相关的操作都是模拟/基于浏览器为基础开发实现出来的。</li>
<li>抓取：
<ul>
<li>一种是抓取一张页面中所有的数据</li>
<li>一种是抓取页面中局部的数据</li>
</ul>
</li>
</ul>
</li>
<li>提问：如果日后你的爬虫程序没有爬取到你想要的数据，why？
<ul>
<li><strong>你的程序模拟浏览器的力度不够！</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>爬虫作为一种计算机技术就决定了它的中立性，因此爬虫本身在法律上并不被禁止，但是利用爬虫技术获取数据这一行为是具有违法甚至是犯罪的风险的。</strong></p>
<h3 id="requests操作">requests操作</h3>
<ul>
<li>requests是一个基于网络请求的模块。可以使用程序模拟浏览器上网。</li>
</ul>
<p>我们爬虫的目的是为了获得数据,所以我们的流程就应该是:指定url----&gt;发送请求--服务器--&gt;返回相应数据包----持久化存储</p>
<p>我们直接对来一个案例来方便我们理解.</p>
<h4 id="案例东方财富首页数据爬取">案例:东方财富首页数据爬取</h4>
<ul>
<li>
<p>https://www.eastmoney.com/</p>
</li>
<li>
<pre><code>import requests

#1.指定url
main_url = 'https://www.eastmoney.com/'

#2.发起请求:
#get函数可以根据指定的url发起网络请求
#get函数会返回一个响应对象:
response = requests.get(url=main_url)

#3.获取响应数据
page_text = response.text #text是可以返回字符串形式的响应数据/爬取到的数据

#4.持久化存储
with open('dongfang.html','w') as fp:
    fp.write(page_text)
</code></pre>
<p>那么当你直接将上面的代码跑起来,你的编译软件可能会爆出一个错误</p>
<pre><code>Traceback (most recent call last):
  File &quot;c:\Users\amdma\Desktop\python\spider\dongfang.py&quot;, line 15, in &lt;module&gt;
    fp.write(page_text)
UnicodeEncodeError: 'gbk' codec can't encode character '\ufeff' in position 0: illegal multibyte sequence
</code></pre>
<p>那么这就是一个典型的编码问题,根据gpt的解释</p>
<p>**默认编码:**你的系统或编辑器可能默认使用 <code>gbk</code> 编码（常见于简体中文Windows系统），但 <code>'\ufeff'</code> 是一个 Unicode 字符，通常表示字节序标记（BOM，Byte Order Mark）。</p>
<p><strong>字符编码不匹配</strong>：你在写入文件时指定的编码与实际的文本编码不匹配。</p>
<p>当你使用下边的代码就能在dongfang.html就能正常显示了,这里添加了两个encoding,你可以自行调试删除其中一个的结果</p>
<pre><code class="language-python">import requests

# 1. 指定url
main_url = 'https://www.eastmoney.com/'

# 2. 发起请求
response = requests.get(url=main_url)

# 3. 设置响应编码为 'utf-8'
response.encoding = 'utf-8'

# 4. 获取响应数据
page_text = response.text

# 5. 持久化存储，明确指定编码为 'utf-8'
with open('dongfang.html', 'w', encoding='utf-8') as fp:
    fp.write(page_text)
</code></pre>
</li>
</ul>
<h4 id="案例爬取51游戏中任何游戏对应的搜索结果页面数据"><strong>案例:爬取51游戏中任何游戏对应的搜索结果页面数据</strong></h4>
<ul>
<li>
<p>url：https://www.51.com/</p>
</li>
<li>
<pre><code>import requests

#1.指定url
game_title = input('enter a game name:')
params = { #字典是用于封装请求参数
    'q':game_title
}
url = 'https://game.51.com/search/action/game/'

#2.发起请求
    #get是基于指定的url和携带了固定的请求参数进行请求发送
response = requests.get(url=url,params=params)
response.encoding = 'utf-8'
#3.获取响应数据
page_text = response.text #text表示获取字符串形式的响应数据
# print(page_text)

#4.持久化存储
fileName = game_title + '.html'
with open(fileName,'w',encoding = 'utf-8') as fp:
    fp.write(page_text)
</code></pre>
</li>
</ul>
<p>这里引入一个字典params,用于封装请求参数.request能够直接识别,所以你的 URL就不需要包含了查询参数例如这样url='https://www.xiachufang.com/search/?keyword=key&amp;cat=1001'这就是一个错误的写法requests 库会自动处理 params，</p>
<h4 id="案例中国人事考试网ua检测">案例:中国人事考试网（UA检测）</h4>
<ul>
<li>
<p>url：http://www.cpta.com.cn/</p>
</li>
<li>
<p>这里你可以尝试着按照上边的逻辑写一个爬虫去观察一下反馈在继续.</p>
<ul>
<li>爬虫模拟浏览器主要是模拟请求参数和主要的请求头。
<ul>
<li>User-Agent:请求载体的身份标识。
<ul>
<li>使用浏览器发请求，则请求载体就是浏览器</li>
<li>使用爬虫程序发请求，则请求载体就是爬虫程序</li>
</ul>
</li>
</ul>
</li>
<li>反爬机制：UA检测
<ul>
<li>网站后台会检测请求的载体是不是浏览器，如果是则返回正常数据，不是则返回错误数据。</li>
</ul>
</li>
<li>反反爬机制：UA伪装
<ul>
<li>将爬虫发起请求的User-Agent伪装成浏览器的身份。</li>
</ul>
</li>
</ul>
</li>
<li>
<pre><code>import requests

url = 'http://www.cpta.com.cn/'

#User-Agent:请求载体（浏览器，爬虫程序）的身份表示
header = {
    'User-Agent':'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36'
}
#伪装了浏览器的请求头
response = requests.get(url=url,headers=header)
response.encoding = 'utf-8'
page_text = response.text

with open('kaoshi.html','w',encoding = 'utf-8') as fp:
    fp.write(page_text)

 
</code></pre>
</li>
<li>
<p>中国人事考试网---站内搜索（post请求+请求参数）</p>
<ul>
<li>
<pre><code>response.encoding = 'utf-8' import requests
 url = 'http://www.cpta.com.cn/category/search'
 param = {
     &quot;keywords&quot;: &quot;人力资源&quot;,
     &quot;搜 索&quot;: &quot;搜 索&quot;
 }
 header = {
     'User-Agent':'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36'
 }
 #发起了post请求：通过data参数携带了请求参数
 response = requests.post(url=url,data=param,headers=header)
 response.encoding = 'utf-8'
 page_text = response.text
 
 with open('renshi.html','w',encoding = 'utf-8') as fp:
     fp.write(page_text)
 
 #通过抓包工具定位了指定的数据包：
     #提取：url，请求方式，请求参数，请求头信息
</code></pre>
</li>
</ul>
</li>
</ul>
<h4 id="小试牛刀">小试牛刀</h4>
<ul>
<li>url：https://www.xiachufang.com/</li>
<li>实现爬取下厨房网站中任意菜谱搜索结果数据爬取</li>
</ul>
<pre><code> import requests
 import urllib
 from urllib.parse import quote
 
 #url='https://www.eastmoney.com/'
 url='https://www.xiachufang.com/search/?keyword={key}&amp;cat=1001'
 headers = {
     'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36',
 }
 key=input(&quot;enter your want eat:&quot;)
 #key='炒肉'
 key = quote(key, 'utf-8')
 print  (url.format(key=key))
 repose=requests.get(url= url.format(key=key),headers=headers)
 text=repose.content
 decoded_text = urllib.parse.unquote(text)
 print(decoded_text)
 with open('eastmoney.html','w',encoding='utf-8') as f:
     f.write(decoded_text)
</code></pre>
<h4 id="案例智慧职教动态加载数据爬取">案例:智慧职教（动态加载数据爬取）</h4>
<ul>
<li>
<p>抓取智慧职教官网中的专业群板块下的所有数据</p>
<ul>
<li>url : https://www.icve.com.cn/portal_new/course/course.html</li>
</ul>
</li>
<li>
<p>测试：直接使用浏览器地址栏中的url，进行请求发送查看是否可以爬取到电影详情数据？</p>
<ul>
<li>不用写程序，基于抓包工具测试观察即可。</li>
</ul>
</li>
<li>
<p>经过测试发现，我们爬取到的数据并没有包含电影详情数据，why？</p>
</li>
<li>
<p>动态加载数据：</p>
<ul>
<li>在一个网页中看到的数据，并不一定是通过浏览器地址栏中的url发起请求请求到的。如果请求不到，一定是基于其他的请求请求到的数据。</li>
<li>动态加载数据值的就是：
<ul>
<li>不是直接通过浏览器地址栏的url请求到的数据，这些数据叫做动态加载数据。</li>
</ul>
</li>
<li>如何获取动态加载数据？
<ul>
<li>确定动态加载的数据是基于哪一个数据包请求到的？</li>
<li>数据包数据的全局搜索：
<ul>
<li>点击抓包工具中任何一个数据包</li>
<li>control+f进行全局搜索（弹出全局搜索框）
<ul>
<li>目的：定位动态加载数据是在哪一个数据包中</li>
</ul>
</li>
<li>定位到动态加载数据对应的数据包，模拟该数据包进行请求发送即可：
<ul>
<li>从数据包中提取出：
<ul>
<li>url</li>
<li>请求参数</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>注意：请求头中需要携带Referer。（体现模拟浏览器的力度）</p>
</li>
<li>
<pre><code>import requests

url = 'https://www.icve.com.cn/portal/course/getNewCourseInfo'
data = {
    &quot;kczy&quot;: &quot;&quot;,
    &quot;order&quot;: &quot;&quot;,
    &quot;printstate&quot;: &quot;&quot;,
    &quot;keyvalue&quot;: &quot;&quot;
}
headers = {
    'User-Agent':'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36',
    'Referer':'https://www.icve.com.cn/portal_new/course/course.html'
}

response = requests.post(url=url,headers=headers,data=data)

#json()可以直接将请求到的响应数据进行反序列化
page_text = response.json()

#解析人名
for dic in page_text['list']:
    name = dic['TeacherDisplayname']
    print(name)

</code></pre>
</li>
</ul>
<h4 id="案例肯德基post请求-动态加载数据-ua检测">案例:肯德基（POST请求、动态加载数据、UA检测）</h4>
<ul>
<li>
<p>http://www.kfc.com.cn/kfccda/storelist/index.aspx</p>
<ul>
<li>
<p>将餐厅的位置信息进行数据爬取</p>
</li>
<li>
<p>爬取多页数据</p>
</li>
<li>
<pre><code>import requests
# POST请求的URL
url = &quot;http://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=keyword&quot;

# 自定义请求头，模拟浏览器访问
headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36',
    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
}

# 模拟多页请求
page_num = 1
keyword = input(&quot;请输入关键字（回车退出）：&quot;)
while True:
    # 构建POST请求的参数（你可能需要根据实际情况调整）
    data = {
        'cname': '',
        'pid': '',
        'keyword': keyword,
        'pageIndex': page_num,
        'pageSize': 10,  # 每页10条数据
    }
    # 发送POST请求
    response = requests.post(url, headers=headers, data=data)
    # 解析返回的JSON数据
    stores = response.json()['Table1']
    
    # 如果没有更多数据，退出循环
    if not stores:
        break

    # 处理并保存数据
    for store in stores:
        print(f&quot;餐厅名: {store['storeName']}, 地址: {store['addressDetail']}, 城市: {store['cityName']}&quot;)
    
    # 下一页
    page_num += 1

print(&quot;数据爬取完成&quot;)

</code></pre>
</li>
</ul>
</li>
</ul>
<h3 id="数据解析">数据解析</h3>
<p>数据解析通用原理：</p>
<ul>
<li>在一张页面源码中，想要爬取的数据是存在于相关的html的标签中。</li>
<li>可以将指定的标签进行定位，然后提取该标签中或者标签属性中存储的数据即可。</li>
</ul>
<p>python中可以实现数据解析的技术：</p>
<ul>
<li>xpath（重要、常用和便捷）</li>
<li>Bs4（自行了解学习）</li>
<li>re正则</li>
<li>pyquery（自行了解学习）</li>
</ul>
<p>而我们本文主要使用的xpath来进行数据解析</p>
<ul>
<li>xpath解析的编码流程:
<ul>
<li>1.创建一个etree类型的对象，然后把即将被解析的页面源码数据加载到该对象中。</li>
<li>2.调用etree对象中的xpath函数，让其结合着不同形式的xpath表达式进行标签定位和数据提取。</li>
</ul>
</li>
</ul>
<p>关于xpath的使用我认为最好的是先尝试理解,可以看看<a href="https://www.bazhuayu.com/helpcenter/docs/V2h1Ec">八爪鱼xpath教程</a>然后通过不断练习,就能有更清晰的认识</p>
<p>我们在爬虫时经常会遇到不同的数据格式,例如图片视频压缩包等,当我们请求他们的地址时,会给我们返回的是二进制数据,而我们只需要将他们写入文件并添加上后缀即可. data为我们的数据</p>
<pre><code>file_name = 'img/'+img_name+'.jpg'
with open(file_name,'wb') as fp:
	fp.write(date)
print(img_name,'：下载保存成功！')
</code></pre>
<h4 id="案例碧血剑小说数据爬取">案例:碧血剑小说数据爬取</h4>
<pre><code>#https://bixuejian.5000yan.com/
#需求：将每一个章节的标题和内容进行爬取然后存储到文件中
import requests
from lxml import  etree

headers={
    'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36'
}
url=&quot;https://bixuejian.5000yan.com/&quot;
response=requests.get(url,headers=headers)
response.encoding = 'utf-8'
tree = etree.HTML(response.text)
title_list=tree.xpath('//div[@class=&quot;p-2 my-2 bg-white rounded&quot;]/ul/li')

with open('xiaoshuo.txt','w',encoding='utf-8') as fp:
    for title  in title_list:
        tiltle_name=title.xpath('./a/text()')[0]
        print(tiltle_name)
        title_link=title.xpath('./a/@href')[0]
        print(title_link)
        artick=requests.get(url=title_link,headers=headers)
        artick.encoding='utf-8'
        #print(artick.text)
        tree2=etree.HTML(artick.text)
        content=tree2.xpath('/html/body/div[2]/div/div[1]/div[3]/div[4]/p//text()')
        content = ''.join(content).strip()
        #content.encode('utf-8')
        print(content)
        fp.write(tiltle_name + ':' + content+'\n')
        print(&quot;章节下载完成&quot;)

</code></pre>
<h4 id="案例简历数据爬取">案例:简历数据爬取</h4>
<pre><code># 载当前页所有的建立模板
#url:https://sc.chinaz.com/jianli/free.html
# - 简历名称+简历的下载链接
# - 根据简历的下载链接 下载简历文件
# - 根据下载地址下载的压缩包，压缩包是二进制的数据
import requests
from lxml import etree
headers={
    'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.128 Safari/537.36 Edg/89.0.774.77',
    
}
for i in range(1,5):
    if i==1:
        url='https://sc.chinaz.com/jianli/free.html'
  
    else:
        url='https://sc.chinaz.com/jianli/free_%d.html'%i
        print('正在爬取第%d页'%i)
    # 解析数据
    response=requests.get(url=url,headers=headers)
    response.encoding='utf-8'
    selector=etree.HTML(response.text)
    # 获取简历名称和简历的下载链接
    li_list=selector.xpath('//*[@id=&quot;container&quot;]/div/p')

    for li in li_list:
        title=li.xpath('./a/text()')[0]
        href=li.xpath('./a/@href')[0]
        #print(title,href)
    # print(li)
        detail_html=requests.get(url=href,headers=headers)
        # 下载简历文件
        detail_html.encoding='utf-8'
        selector2=etree.HTML(detail_html.text)
        # 获取简历的下载链接
        href2=selector2.xpath('//*[@id=&quot;down&quot;]/div[2]/ul/li/a/@href')[0]
        #print(title,href2)
        # 下载简历文件
        detail_html2=requests.get(url=href2,headers=headers).content
        # 保存简历文件
        file_name = 'jianli/'+title+'.rar'
        with open(file_name,'wb') as fp:
            fp.write(detail_html2)
        print(title,'：下载保存成功！')
    

</code></pre>
<h4 id="案例图片数据爬取">案例:图片数据爬取</h4>
<pre><code>#url: http://pic.netbian.com/4kmeinv/
#图片数据爬取：
# - 将爬取到的图片存储到指定的文件夹中
# - 抓取详情页大图
# - 爬取多页
import requests
from lxml import etree
header = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36',
}
url='https://pic.netbian.com/4kfengjing/'
respones=requests.get(url,headers=header)
respones.encoding='gbk'
tree=etree.HTML(respones.text)
img_list=tree.xpath('//*[@id=&quot;main&quot;]/div[3]/ul/li')
print(img_list)
for img in img_list:
    img_url=img.xpath('.//@src')[0]
    img_name=img.xpath('.//@alt')[0]
    img_name=img_name.replace('*','x')
    print(img_name)
    img_url='https://pic.netbian.com/'+img_url
    print(img_url)
    date=requests.get(url=img_url,headers=header).content
      
    file_name = 'img/'+img_name+'.jpg'
    with open(file_name,'wb') as fp:
        fp.write(date)
    print(img_name,'：下载保存成功！')

</code></pre>
<h3 id="反爬虫思考">反爬虫思考</h3>
<p>正如前文提到的如果日后你的爬虫程序没有爬取到你想要的数据，why？<strong>你的程序模拟浏览器的力度不够！</strong></p>
<p>那么只要在你在浏览器能够看到的所有数据东西都是能够通过python爬取的，如果不行，那一定是你模拟浏览器的程度不够，一定是你目前有什么技术问题没有解决掉。所以我们就要看需要怎么加大模拟的力度,无论是增加请求的参数，使用新技术等，这里我们讲讲请求参数问题，面对爬虫的过程中需要那些数据来请求可以看看浏览器开发者工具中header中有哪些参数,当然我们并不需要全部写上去,我们可以控制变量调试，选择最少的参数</p>
<figure data-type="image" tabindex="1"><img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202409151837335.png" alt="image-20240915183718248" loading="lazy"></figure>
<ul>
<li>
<h4 id="referer">referer</h4>
<p>referer是告诉服务器你是从哪个地方来,接下来这个案例如果你直接访问这个视频地址,显然是行不通的,因为你直接访问时是没有referer的,而你通过主页访问,带上了referer就可以,所以对应过来,你的请求有也需要带上referer\</p>
</li>
</ul>
<h4 id="案例视频爬取">案例:视频爬取</h4>
<pre><code># url：https://www.51miz.com/shipin/
# 爬取当前url页面中营销日期下的几个视频数据。
import requests
from lxml import etree

url='https://www.51miz.com/shipin/'
headers={
    'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.128 Safari/537.36 Edg/89.0.774.77',
    'referer':'https://www.51miz.com/shipin/'
}
response=requests.get(url,headers=headers)
response.encoding='utf-8'
tree=etree.HTML(response.text)
# 获取当前页面中营销日期下的视频数据
video_list=tree.xpath('/html/body/div[2]/div[2]/div[1]/div[2]/div[2]/div')
for video in video_list:
    video_list2=video.xpath('./a')
    #print(video_list2)
    for one in video_list2:
        title=one.xpath('div/div/div/div/text()')
        url=one.xpath('.//source/@src')
        url='https:'+url[0]
        print(url)
        data=requests.get(url=url,headers=headers)
        with open(f'video/{title}.mp4','wb') as f:
            f.write(data.content)
            print(f'{title}下载成功')
</code></pre>
<ul>
<li>
<p>cookie</p>
<h4 id="案例雪球数据爬取">案例:雪球数据爬取</h4>
<p>这里我们引入session这个对象,它能够存储自动存储我们的cookie</p>
<pre><code>import requests

headers = {
    'User-Agent':'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36',
}
param = {
    #如果遇到了动态变化的请求参数？必须经过测试才知道需不需要处理
    &quot;since_id&quot;: &quot;-1&quot;,
    &quot;max_id&quot;: &quot;553059&quot;, #动态变化的请求参数
    &quot;size&quot;: &quot;25&quot;
}

url = 'https://xueqiu.com/statuses/hot/listV2.json'

#session对象会实时保存跟踪服务器端给客户端创建的cookie
    #创建一个session对象
session = requests.Session() #空白的session对象
print(session.cookies)
first_url = 'https://xueqiu.com/'
#使用session对象进行请求发送：如果该次请求时，服务器端给客户端创建cookie的话，则该cookie就会被保存seesion对象中
session.get(url=first_url,headers=headers)
#使用保存了cookie的session对象进行后续请求发送
ret = session.get(url=url,headers=headers,params=param).json()
print(ret)
</code></pre>
</li>
<li>
<p>proxy代理</p>
<p>代理也是爬虫一个特别重要的工具,很多网站为了保护自己的服务器正常运行对于,一些异常的ip会采取一些临时封禁的策略.那么这个时候,我们如果没有别的ip那么爬虫任务不久失败了吗?我们可以在网上搜代理ip会发现很多,关于代理中的介绍可以看看<a href="https://www.kuaidaili.com/doc/product/tps/">快代理的产品介绍</a></p>
<pre><code class="language-python">#proxy参数接受的是一个字典，字典的key是协议类型，value是ip地址 dic['https'] = ips.strip()

import requests
from lxml import etree
import random
import time
headers ={
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.128 Safari/537.36',
}
proxy_url = ''
page_text = requests.get(url=proxy_url,headers=headers).text
proxy_list = [] #代理池
for ips in page_text.split('\n')[0:-1]:
    dic = {}
    dic['https'] = ips.strip()
    proxy_list.append(dic)
url='http://www.cip.cc'
response=requests.get(url,headers=headers)
tree=etree.HTML(response.text)
result=tree.xpath('/html/body/div/div/div[3]/pre/text()')[0]
print(result.split('\n')[0])
#print(result)
page_text = requests.get(url=proxy_url,headers=headers).text
proxy_list = [] #代理池
for ips in page_text.split('\n')[0:-1]:
    dic = {}
    dic['https'] = ips.strip()
    proxy_list.append(dic)
for page in range(1, 5001):
    print('正在爬取第%d页的ip数据......' % page)
    #生成不同页码对应的url
    url = 'https://www.kuaidaili.com/free/inha/%d/' % page
    page_text = requests.get(url=url, headers=headers,proxies=random.choice(proxy_list)).text
    time.sleep(0.5)
    tree = etree.HTML(page_text)
    ip = tree.xpath('//*[@id=&quot;list&quot;]/div[1]/table/tbody/tr[1]/td[1]/text()')[0]
    print(ip)
</code></pre>
</li>
</ul>
<h3 id="并发编程">并发编程</h3>
<p>面对大量数据爬取过程中我们肯定是想尽可能提升自己的爬取效率，这里就会引入一些新的概念，包括线程，进程，并发，并行，同步，异步。这里我们简答解释方便理解就行，关于底层的原理我们不深入分析这个是操作系统这门课程会讲的。</p>
<h4 id="进程线程">进程&amp;线程</h4>
<p>计算机的核心是CPU，它承担了所有的<strong>计算任务</strong>。它就像一座工厂，时刻在运行。CPU的核数（多核计算机多个CPU，大部分情况下也只是用了一核CPU）</p>
<ul>
<li>假定工厂的电力有限，一次只能供给一个车间使用。也就是说，一个车间开工的时候，其他车间都必须停工。背后的含义就是，<strong>单核CPU一次只能运行一个任务</strong>（同一时刻只能干一件事）。</li>
</ul>
<p><strong>进程就相当于工厂里边的车间，他代表的是cpu所能处理的单个任务。那么在车间里边可以有很多的流水线或者说工人来协助完成一个任务。一个进程可以包括多个线程。</strong></p>
<p>拓展：车间的空间是工人们共享的，比如许多房间是每个工人都可以进出的。这象征<strong>一个进程的内存空间是被该进程下所有线程共享的</strong>，每个线程都可以使用这些共享内存。</p>
<h5 id="进程调度">进程调度</h5>
<p>进程就是计算机中正在运行的一个程序或者软件，并且在上述工厂案例中，我们说单个CPU一次只能运行一个任务，那么你有没有在电脑上一边聊微信一边听音乐一边打游戏的场景啊？why？</p>
<p>要想多个进程交替运行，操作系统必须对这些进程进行调度，这个调度也不是随机进行的，而是需要遵循一定的法则，由此就有了进程的调度算法。</p>
<ul>
<li>目前已实现的调度算法有：先来先服务（FCFS）调度算法、短作业优先调度算法和时间片轮转法。不过被公认的一种比较好的进程调度算法是&quot;时间片轮转法&quot;。</li>
</ul>
<p>这里不做深入解释，想要了解的可以再去单独查询资料</p>
<h4 id="并行并发">并行&amp;并发</h4>
<p>通过进程之间的调度，也就是进程之间的切换，我们用户感知到的好像是两个视频文件同时在播放，或者音乐和游戏同时在进行，那就让我们来看一下什么叫做并发和并行。</p>
<ul>
<li>**并行：**同时运行，只有具备多个cpu才能实现并行</li>
<li>**并发：**是伪并行，即看起来是同时运行（时间片轮转法）。</li>
</ul>
<p>无论是并行还是并发，在用户看来都是'同时'运行的，不管是进程还是线程，都只是一个任务而已，真实干活的是cpu，而一个cpu同一时刻只能执行一个任务。</p>
<p><strong>举例说明</strong></p>
<p>你吃饭吃到一半，电话来了，你一直到吃完了以后才去接，这就说明你不支持并发也不支持并行。<br>
你吃饭吃到一半，电话来了，你停了下来接了电话，接完后继续吃饭，这说明你支持并发。<br>
你吃饭吃到一半，电话来了，你一边打电话一边吃饭，这说明你支持并行。</p>
<p><strong>总结</strong></p>
<p>并发的关键是你有处理多个任务的能力，不一定要同时。</p>
<p>并行的关键是你有同时处理多个任务的能力。</p>
<p>所以它们最关键的点就是：是否是『同时』。</p>
<h4 id="进程的状态">进程的状态</h4>
<p>在程序运行的过程中，由于被操作系统的调度算法控制，程序会进入几个状态：就绪，运行、阻塞和终止。</p>
<ul>
<li>
<p>就绪(Ready)状态</p>
<ul>
<li>进程已经准备好，已分配到所需资源/内存。</li>
</ul>
</li>
<li>
<p>执行/运行（Running）状态</p>
<ul>
<li>进程处于就绪状态被调度后，进程进入执行状态</li>
</ul>
</li>
<li>
<p>阻塞(Blocked)状态（耗时操作）</p>
<ul>
<li>正在执行的进程由于某些事件而暂时无法运行，进程受到阻塞,则进入就绪状态等待系统调用
<ul>
<li>网络请求，input等</li>
</ul>
</li>
</ul>
</li>
<li>
<p>终止状态</p>
<ul>
<li>进程结束，或出现错误，或被系统终止，进入终止状态。无法再执行</li>
</ul>
</li>
</ul>
<h4 id="同步异步">同步&amp;异步</h4>
<ul>
<li>
<p>同步：</p>
<ul>
<li>CPU在执行一个任务的时候，任务的每一个步骤是顺序执行的，并且必须是每前一个步骤执行完毕后才可以执行下一个步骤，这就是同步的含义。</li>
</ul>
</li>
<li>
<p>异步：</p>
<ul>
<li>异步是指，任务的所有步骤也是顺序被执行，但是与同步不同的是，异步的模式下，不会等前一个步骤执行完毕后才会执行下一个步骤，而是当一个步骤一旦被执行，无论该步骤是否被执行结束，都会马上执行下一个步骤。</li>
</ul>
</li>
<li>
<p>案例理解：</p>
<ul>
<li>以做饭为例：
<ul>
<li>同步方式就是按照步骤依次做，先烧水，然后煮饭，最后炒菜。只有前面的步骤完成后才能进行下一个步骤。在一个步骤未完成的情况下，你不可以干任何事情。</li>
<li>异步的方式就是，在烧水且水还没开的情况下，你可以去干其他事，比如刷手机、发邮件等。也就是在等待每个步骤完成的过程中，你可以干其他事，不必傻傻的等下去。
<ul>
<li>该案例中的，烧水、煮饭和炒菜都是一些耗时操作，可以被称为<strong>阻塞操作！</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>注意：同步和异步针对是cup在执行任务时遇到阻塞操作时，所产生的不同行为！</p>
</li>
</ul>
<p>接下来就来到python当中具体的实现部分</p>
<h3 id="python进程的实现">Python进程的实现</h3>
<h4 id="multiprocessing包">multiprocessing包</h4>
<p>multiprocess是python中管理进程的包。 之所以叫multi是取自multiple的多功能的意思,在这个包中几乎包含了和进程有关的所有子模块，提供的子模块非常多。</p>
<h4 id="process模块">Process模块</h4>
<p>Process模块是一个创建进程的模块，借助这个模块，就可以完成进程的创建。</p>
<p>之前我们说过，运行一个py文件就相当于启动了一个进程，这个进程我们成为**&quot;主进程&quot;**</p>
<p>而在主进程对应的py文件中，可以通过Process模块创建另一个进程，这个进程是基于主进程创建的，因此可以被称为**&quot;子进程&quot;**</p>
<p>当有了两个进程后，我们其实就可以实现<strong>异步机制</strong>了！</p>
<pre><code class="language-python">from multiprocessing import Process
def func():
    print('我是绑定给子进程的一组任务！')

if __name__ == '__main__':
    print('主进程开始执行！')
    #创建一个进程p，给该进程绑定一组任务
    p = Process(target=func)
    #启动创建好的进程
    p.start()

    print('主进程执行结束！')
</code></pre>
<p>具体实现过程：</p>
<p>1.导入模块：from multiprocessing import Process</p>
<p>2.基于Process创建一个子进程对象(当前运行的整个py文件表示主进程)，然后可以基于target参数将外部的一个函数注册到该子进程中</p>
<p>3.基于start()方法启动创建好的子进程</p>
<p>那么这里我们看得到没有参数传递，我们要如何给函数传递参数呢？——通过args传递参数</p>
<pre><code>from multiprocessing import Process
def func(num1,num2):
    print('我是绑定给子进程的一组任务！',num1,num2)

if __name__ == '__main__':
    print('主进程开始执行！')
    #创建一个进程p，给该进程绑定一组任务
    p = Process(target=func,args=(123,456))
    #启动创建好的进程
    p.start()

    print('主进程执行结束！')
</code></pre>
<p>我们学习异步就是应为他能极大的提升效率，他能解决时间，接下来我们来说说进程实现异步效果。</p>
<p>首先我们用一个同步程序来进行对比</p>
<pre><code class="language-python">import time
def get_request(url):
    print('正在请求网址的数据：',url)
    time.sleep(2)
    print('请求结束:',url)

if __name__ == &quot;__main__&quot;:
    start = time.time()
    urls = ['www.1.com','www.2.com','www.3.com']
    for url in urls:
        get_request(url)
    print('总耗时：',time.time()-start)
</code></pre>
<p>这个程序会请求三个网站运行时间应该在6秒多点点</p>
<p>而我们使用异步效果</p>
<pre><code class="language-python">import time
from multiprocessing import Process
def get_request(url):
    print('正在请求网址的数据：',url)
    time.sleep(2)
    print('请求结束:',url)

if __name__ == &quot;__main__&quot;:
    urls = ['www.1.com','www.2.com','www.3.com']
    for url in urls:
        #创建了三个进程，表示三组任务
        p = Process(target=get_request,args=(url,))
        p.start()
       
</code></pre>
<p>为了不让增大大家对异步理解，我们就不在上边＋计时，计时的在下边这个代码里边。因为这里不能简单地在urls前边加个  start = time.time()，程序后边加一个print答应，因为你启动了进程，但没有等待它们结束。主程序会立即执行完 <code>for</code> 循环并打印出总耗时，而不会等待所有子进程完成。这可能导致你看到的总耗时小于实际所有请求完成所需的时间。并确保你计算的是所有请求完成的时间，你需要在启动每个进程后调用 <code>p.join()</code> 方法。这会阻塞主进程，直到对应的子进程完成。以下是修改后的代码：</p>
<pre><code>import time
from multiprocessing import Process

def get_request(url):
    print('正在请求网址的数据：', url)
    time.sleep(2)  
    print('请求结束:', url)

if __name__ == &quot;__main__&quot;:
    start = time.time()
    urls = ['www.1.com', 'www.2.com', 'www.3.com']
    processes = []  # 创建一个列表来存储所有的进程

    for url in urls:
        # 创建进程
        p = Process(target=get_request, args=(url,))
        p.start()  # 启动进程
        processes.append(p)  # 将进程添加到列表中

    # 等待所有进程完成#p就是列表中的每一个进程
    for p in processes:
        p.join()#每一个子进程都执行了join操作

    print('总耗时：', time.time() - start)
</code></pre>
<h4 id="进程数据通信">进程数据通信</h4>
<pre><code>#观察下述代码出现的问题是什么？（了解）
from multiprocessing import Process
import time
ticketNum = 10 #全部的车票
def func(num):
    print('我是子进程，我要购买%d张票！'%num)
    global ticketNum
    ticketNum -= num
    time.sleep(2)

if __name__ == '__main__':
    p = Process(target=func,args=(3,))
    p.start()
    #主进程在子进程结束之后在结束
    p.join() #只有当子进程结束后，join的调用结束，才会执行join后续的操作
    print('目前剩余车票数量为:',ticketNum) #输出结果依然是10
    #进程和进程之间是完全独立。两个进程对应的是两块独立的内存空间，每一个进程只可以访问自己内存空间里的数据。
</code></pre>
<ul>
<li>
<p>如果主进程的查询结果是在2s中后才出现的，则join生效了。但是查询结果为什么是这样的呢？</p>
<ul>
<li>首先，ticketNum = 10这个变量是存在于主进程中的，然后再func函数中ticketNum则是将全局变量ticketNum的值拷贝到了子进程中的ticketNum变量中，因此在func中的减法操作只能作用在子进程的变量中。最终，最后一行主进程打印的ticketNum则是原来主进程未发生变量的值。</li>
</ul>
</li>
<li>
<p>如何解决？(自己可以尝试文件共享)</p>
<ul>
<li>进程通信机制，管道，信号量等(没必要掌握，日后用不到)</li>
</ul>
</li>
<li>
<p>继续思考：一个子进程函数的返回值如何被主进程获取？</p>
</li>
<li>
<p><strong>总结：进程之间的数据是隔离的，也就是数据不共享</strong></p>
</li>
</ul>
<h4 id="守护进程">守护进程</h4>
<p>那么如果有一天我们的需求是我的主进程结束了，由主进程创建的那些子进程必须跟着结束，怎么办？守护进程就来了！</p>
<pre><code class="language-python">import time
from multiprocessing import Process
def get_request(url):
    print('正在请求网址的数据：',url)
    time.sleep(2)
    print('请求结束:',url)

if __name__ == &quot;__main__&quot;:
    start = time.time()
    p = Process(target=get_request,args=('www.1.com',))
    # 将当前p这个子进程设置为了守护进程
    p.daemon = True #该操作必须放置在子进程启动操作之前
    p.start()

    print('主进程执行结束')
</code></pre>
<p>主进程创建守护进程后：</p>
<p>其一：守护进程会在主进程代码执行结束后就终止</p>
<p>其二：守护进程内无法再开启子进程,否则抛出异常：AssertionError: daemonic processes are not allowed to have children</p>
<p>注意：主进程代码运行结束，守护进程随即终止！</p>
<h3 id="线程的实现">线程的实现</h3>
<h4 id="基本概念">基本概念</h4>
<p>**线程：**线程是操作系统能够进行运算调度的最小单位（车间里的工人），它被包含在进程之中，线程是进程中的实际运作单位。</p>
<p>注意：</p>
<p>​	1.同一个进程内的多个线程是共享该进程的资源的，不同进程内的线程资源肯定是隔离的</p>
<p>​	2.创建线程的开销比创建进程的开销要小的多</p>
<p>​	3.每一个进程中至少会包含有一个线程，该线程叫做&quot;主线程&quot;</p>
<h4 id="python线程模块的选择">python线程模块的选择</h4>
<p>Python提供了几个用于多线程编程的模块，包括thread、threading和Queue等。但是threading模块更为先进，对线程的支持更为完善，因此推荐大家使用该模块！</p>
<h4 id="threading模块">threading模块</h4>
<ul>
<li>线程的创建</li>
</ul>
<pre><code class="language-python">from threading import Thread
def func(num):
    print('num的值是:',num)

if __name__ == '__main__':
    #创建好了一个子线程（在主线程中创建）
    t = Thread(target=func,args=(1,))
    t.start()
</code></pre>
<p>和上边进程类似的join方法</p>
<pre><code>from threading import Thread
import time
class MyThread(Thread):
    def __init__(self):
        super().__init__()

    def run(self):
        print('当前子线程正在执行')
        time.sleep(2)
        print('当前子线程执行结束')

if __name__ == '__main__':
    start = time.time()

    ts = []
    for i in range(3):
        t = MyThread() #创建线程对象
        t.start() #启动线程对象
        ts.append(t)
    for t in ts:
        t.join()
    print('总耗时:',time.time()-start)
</code></pre>
<p>关于通讯，线程的内存数据是共享的，我们可以看这个例子</p>
<pre><code>from threading import Thread
import time
def work():
    global n
    n = 0 #将全局变量修改为了0
if __name__ == '__main__':
    n = 1 #全局变量
    t = Thread(target=work)
    t.start()
    print(n) #在进程中输出全局变量的值就是线程修改后的结果为0
</code></pre>
<h4 id="守护线程">守护线程</h4>
<ul>
<li>无论是进程还是线程，都遵循：守护xx会在主xx运行完毕后被销毁，不管守护xx时候被执行结束。</li>
</ul>
<pre><code>from threading import Thread
import time
def work():
    time.sleep(1)
    print('子线程正在执行！')
if __name__ == '__main__':
    t = Thread(target=work)
    t.daemon = True #当前的子线程设置为了守护线程
    t.start()
    print('主线程结束！')
</code></pre>
<p>那么到这里我们已经学习了异步和多线程，那么现在来试试多线程实现的异步效果</p>
<h4 id="案例多线程实现的异步效果">案例：多线程实现的异步效果：</h4>
<pre><code>#urls = ['www.1.com','www.2.com','www.3.com','www.4.com','www.5.com']
from threading import Thread
import time
def work(url):
  print('正在请求',url)
  time.sleep(2)
  print('爬取数据结束')
start = time.time()
urls = ['www.1.com', 'www.2.com', 'www.3.com', 'www.4.com', 'www.5.com']
ts=[]
for url in urls:
    t=url=Thread(target=work,args=(url,))
    t.start()
    ts.append(t)
for t in ts:
    t.join()
print('总耗时：',time.time()-start)

</code></pre>
<h4 id="线程池">线程池</h4>
<p>线程预先被创建并放入线程池中，同时处理完当前任务之后并不销毁而是被安排处理下一个任务，因此能够避免多次创建线程，从而节省线程创建和销毁的开销，能带来更好的性能和系统稳定性。</p>
<pre><code>from multiprocessing.dummy import Pool #导入了线程池模块
import time
urls = ['www.1.com','www.2.com','www.3.com','www.4.com','www.5.com']
def get_reqeust(url):
    print('正在请求数据：',url)
    time.sleep(2)
    print('请求结束:',url)
start = time.time()
#创建一个线程池,开启了5个线程
pool = Pool(5)
#可以利用线程池中三个线程不断的去处理5个任务
pool.map(get_reqeust,urls)
#get_reqeust函数调用的次数取决urls列表元素的个数
#get_requests每次执行都会接收urls列表中的一个元素作为参数

print('总耗时：',time.time()-start)
pool.close() #释放线程池
</code></pre>
<h3 id="协程重要">协程（重要！）</h3>
<p><strong>协程可以实现在单进程或者单线程的模式下，大幅度提升程序的运行效率！</strong></p>
<ul>
<li>假设我们有一个需求：从一个URL列表中下载多个网页内容，假设下载一个网页内容需要耗时2秒。
<ul>
<li>在传统的多线程或多进程模型中，我们会为每个URL创建一个线程或进程来进行异步的下载操作。但是这样做会有一个问题：
<ul>
<li>计算机中肯定不会只有下载URL的这几个进程/线程，还会有其他的进程/线程（Pycharm、音乐播放器、微信、网盘等）。</li>
<li>将每一个下载网页的操作封装成一个进程/线程的目的就是为了实现异步的网页数据下载，也就是当一个下载网页的操作出现阻塞后，可以不必等待阻塞操作结束后就可以让计算机去下载其他网页内容（CPU切换到其他网页下载的进程/线程中）。</li>
<li>但是，计算机中启动的进程/线程那么多，你确定每次CPU进行进程/线程切换，都会切换到网页下载的进程/线程中吗？答案是不一定，因为这个进程/线程切换是由操作系统实现的，无法人为干涉。那么，这些网页下载任务的执行的效率就降低下来了。因此，可以使用协程来解决该问题！</li>
</ul>
</li>
<li>协程处理多个网页内容下载任务：
<ul>
<li>将所有的网页下载任务全部封装在一个进程/线程中，基于单进程/单线程来实现多个网页下载的任务。</li>
<li>在这个下载任务的单进程/单线程，需要我们自己主动监测出所有的阻塞环节，使得cpu在这些阻塞环节切换执行，这样当前下载任务的单进程/单线程处于就绪态就会增多，以此来迷惑操作系统，操作系统便以为当前的下载任务是阻塞比较少的单进程/单线程，从而会尽可能多的分配CPU给我们，这样也就达到了提升程序执行效率的目的。</li>
<li>因此，有了协程后，在单进程或者单线程的模式下，就可以大幅度提升程序的运行效率了！</li>
</ul>
</li>
<li>总而言之，就是想尽一切办法留住CPU在我们自己的程序中，从而提升整个程序的执行效率！</li>
</ul>
</li>
</ul>
<h4 id="asyncio模块">asyncio模块</h4>
<ul>
<li>
<p>在python3.6之后新增了asyncio模块，可以帮我们检测阻塞（只能是网络阻塞），实现应用程序 级别的切换。</p>
</li>
<li>
<p>接下来让我们来了解下协程的实现，从 Python 3.6 开始，Python 中加入了协程的概念，但这个版本的协程还是以生成器对象为基础的，在 Python 3.6 则增加了 asyncio，使得协程的实现更加方便。首先我们需要了解下面几个概念：</p>
<ul>
<li>
<p>特殊函数：</p>
<ul>
<li><strong>在函数定义前添加一个async关键字，则该函数就变为了一个特殊的函数！</strong></li>
<li>特殊函数的特殊之处是什么？
<ul>
<li>1.特殊函数被调用后，函数内部的程序语句（函数体）没有被立即执行</li>
<li>2.特殊函数被调用后，会返回一个协程对象</li>
</ul>
</li>
</ul>
</li>
<li>
<p>协程：</p>
<ul>
<li>协程对象，特殊函数调用后就可以返回/创建了一个协程对象。</li>
<li>协程对象 == 特殊的函数 == 一组指定形式的操作
<ul>
<li>协程对象  == 一组指定形式的操作</li>
</ul>
</li>
</ul>
</li>
<li>
<p>任务：</p>
<ul>
<li>任务对象就是一个高级的协程对象。高级之处，后面讲，不着急！</li>
<li>任务对象 == 协程对象  == 一组指定形式的操作
<ul>
<li>任务对象 == 一组指定形式的操作</li>
</ul>
</li>
</ul>
</li>
<li>
<p>事件循环：</p>
<ul>
<li>事件循环对象（Event Loop）,可以将其当做是一个容器，该容器是用来装载任务对象的。所以说，让创建好了一个或多个任务对象后，下一步就需要将任务对象全部装载在事件循环对象中。loop就可以将其内部装载的任务对象进行异步的执行。</li>
</ul>
<p>直接说显得比较抽象，我们用几段代码来展示。这是一个get_requests是一个异步函数</p>
<pre><code class="language-python">import asyncio
import time
#特殊的函数
async def get_request(url):
    print('正在请求的网址是:',url)
    time.sleep(2)
    print('请求网址结束！')
    return 123
#创建了一个协程对象
c = get_request('www.1.com')
#创建任务对象
task = asyncio.ensure_future(c)
#创建事件循环对象
loop = asyncio.get_event_loop()
#将任务对象装载在loop对象中且启动事件循环对象
loop.run_until_complete(task)
</code></pre>
<p>那么接下来我们就来试试异步的效果吧</p>
</li>
</ul>
<pre><code class="language-python">import asyncio
import time
start = time.time()
urls = [
    'www.1.com','www.2.com','www.3.com'
]
async def get_request(url):
    print('正在请求：',url)
    time.sleep(2)
    print('请求结束:',url)
#有了三个任务对象和一个事件循环对象
if __name__ == '__main__':
    tasks = []
    for url in urls:
        c = get_request(url)
        task = asyncio.ensure_future(c)
        tasks.append(task)
    #将三个任务对象，添加到一个事件循环对象中
    loop = asyncio.get_event_loop()
    loop.run_until_complete(asyncio.wait(tasks))

    print('总耗时:',time.time()-start)

</code></pre>
<p>当我们运行代码的时候会发现，程序并没有实现异步效果</p>
<figure data-type="image" tabindex="2"><img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202409161622482.png" alt="image-20240916162216431" loading="lazy"></figure>
</li>
</ul>
<p>这是为什么呢，那是因为在特殊函数内部，不可以出现不支持异步的木块代码，否则就会中断整个异步效果。在Python中，有些标准库模块和函数是同步执行的，这意味着它们会阻塞当前线程直到操作完成，因此它们不适用于异步编程环境。常见的有</p>
<pre><code>time.sleep()：这是一个同步函数，它会暂停程序执行指定的时间，阻塞事件循环。
标准I/O操作：
open()：用于打开文件的同步函数。
read()：从文件中读取数据的同步函数。
write()：向文件写入数据的同步函数。
socket模块：标准的socket模块提供的是同步的网络操作。
select模块：用于同步I/O多路复用。
threading模块：用于创建线程的同步模块。
multiprocessing模块：用于创建进程的同步模块。
subprocess模块：用于创建子进程的同步模块，其中的函数如subprocess.run()、subprocess.call()等会阻塞直到子进程完成。
requests模块：用于同步HTTP请求的模块。
urllib模块：用于同步URL处理的模块。
json模块：虽然json.loads()和json.dumps()本身是同步的，但它们可以用于异步环境，只要它们处理的数据不是来自异步I/O操作。
xml模块：用于解析XML数据的同步模块。
数据库连接：大多数数据库连接库（如sqlite3、psycopg2等）提供的是同步连接和操作。
在异步编程中，通常需要使用支持异步操作的库来替代这些同步库。例如：

使用aiohttp库替代requests进行异步HTTP请求。
使用aiofiles库进行异步文件操作。
使用asyncio库中的asyncio.sleep()代替time.sleep()。
使用asyncio库中的asyncio.open_connection()、asyncio.start_server()等函数进行异步网络操作。
使用asyncio库中的子进程管理功能，如asyncio.create_subprocess_exec()来替代subprocess模块。
</code></pre>
<p>那么显然这里是应为出现了   time.sleep(2)，我们替换为asyncio.sleep(2)，前面需要加await</p>
<figure data-type="image" tabindex="3"><img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202409161637892.png" alt="image-20240916163731846" loading="lazy"></figure>
<p>那么接下是多任务的异步协程作用在爬虫当中。前文提到request不支持到异步，那么我们需要用到aiohttp</p>
<pre><code class="language-python">    with aiohttp.ClientSession() as sess:
       #基于请求对象发起请求
       #此处的get是发起get请求，常用参数：url,headers,params,proxy
       #post方法发起post请求，常用参数：url,headers,data,proxy
       #发现处理代理的参数和requests不一样（注意），此处处理代理使用proxy='http://ip:port'
        with sess.get(url=url) as response:
           page_text = response.text()
           #text():获取字符串形式的响应数据
           #read()：获取二进制形式的响应数据
           return page_text
</code></pre>
<ul>
<li>
<p>在每一个with前加上async关键字</p>
</li>
<li>
<p>在阻塞操作前加上await关键字</p>
</li>
</ul>
<pre><code>async def get_request(url):
    #requests是不支持异步的模块
    # response = await requests.get(url=url)
    # page_text = response.text
    #创建请求对象（sess）
    async with aiohttp.ClientSession() as sess:
        #基于请求对象发起请求
        #此处的get是发起get请求，常用参数：url,headers,params,proxy
        #post方法发起post请求，常用参数：url,headers,data,proxy
        #发现处理代理的参数和requests不一样（注意），此处处理代理使用proxy='http://ip:port'
        async with await sess.get(url=url) as response:
            page_text = await response.text()
            #text():获取字符串形式的响应数据
            #read()：获取二进制形式的响应数据
            return page_text
</code></pre>
<p>那么后续结合着实战来理解可能会更好吗，这里先将到这。</p>
<h3 id="m3u8流视频数据爬虫">M3U8流视频数据爬虫</h3>
<h4 id="hls技术介绍">HLS技术介绍</h4>
<p>现在大部分视频客户端都采用HTTP Live Streaming（HLS，Apple为了提高流播效率开发的技术），而不是直接播放MP4等视频文件。HLS技术的特点是将流媒体切分为若干【TS片段】（比如几秒一段），然后通过一个【M3U8列表文件】将这些TS片段批量下载供客户端播放器实现实时流式播放。因此，在爬取HLS的流媒体文件的思路一般是先【下载M3U8文件】并分析其中内容，然后在批量下载文件中定义的【TS片段】，最后将其【组合】成mp4文件或者直接保存TS片段。</p>
<h5 id="m3u8文件">M3U8文件</h5>
<p>M3U8也是一种M3U的扩展格式（高级的M3U，所以也属于M3U）。</p>
<p>**M3U8示例：**大家会看到在该文件中有大量的ts文件的链接地址，这个就是我们之前描述的真正的视频文件。其中任何一个ts文件都是一小段视频，可以单独播放。我们做视频爬虫的目标就是把这些ts文件都爬取下来。</p>
<h4 id="案例美剧天堂视频">案例：美剧天堂视频</h4>
<h5 id="具体操作">具体操作</h5>
<ol>
<li>进入视频播放页</li>
<li>点击播放按钮，定位ts数据包，从中提取ts片段的url，探究url的规律</li>
<li>打开抓包工具，刷新页面，全局搜索m3u8定位到找到m3u8文件</li>
<li>解析m3u8文件提取文件中ts片段链接</li>
<li>ts文件的合并，最好网上找专业的工具进行合并，自己手动合并会经常出问题</li>
</ol>
<p>寻找到关于切片的信息后就可以开始写代码</p>
<figure data-type="image" tabindex="4"><img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202409161703856.png" alt="image-20240916170333734" loading="lazy"></figure>
<p>正常同步版本</p>
<pre><code>import os.path
import requests
import re
dirname='tlsfile'
if not os.path.exists(dirname):
    os.mkdir(dirname)
headers={
    'User-Agent':'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36'
}
url='https://cdn13.tvtvgood.com/202308/03/ccc19bdb33b6/playlist.m3u8?token=bPDBdBggejAgNQP52VwPOA&amp;expires=1726477655'
response_text=requests.get(url=url,headers=headers).text
print(response_text)
tls_list=[]
for line in response_text.split('\n'):
    if not line.startswith('#'):
        ts_url=line
        ts_url='https://cdn13.tvtvgood.com/202308/03/ccc19bdb33b6/'+ts_url
        print('请求url：',ts_url)
        tls_list.append(ts_url)

for url in tls_list:
    response=requests.get(url=url,headers=headers)
    ts_data=response.content
    ts_name=url.split('/')[-1]
    ts_path=dirname+'/'+ts_name
    with open(ts_path,'wb') as fp:
        fp.write(ts_data)
        print(ts_name,'下载成功')
    print('文件下载完成')

</code></pre>
<p>异步版本(只是将不支持异步的部分换一下，你会发现速度快了很多)</p>
<pre><code># -*- coding =utf-8 -*-
# @time: 2024-09-16 16:59
# @anthor: jasun
# @file:m3u8.py
# @Asoftware:PyCharm
import os.path
import requests
import re
import asyncio
import aiohttp
dirname='tlsfile'
if not os.path.exists(dirname):
    os.mkdir(dirname)
headers={
    'User-Agent':'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36'
}
url='https://cdn13.tvtvgood.com/202308/03/ccc19bdb33b6/playlist.m3u8?token=bPDBdBggejAgNQP52VwPOA&amp;expires=1726477655'
response_text=requests.get(url=url,headers=headers).text
print(response_text)
tls_list=[]
for line in response_text.split('\n'):
    if not line.startswith('#'):
        ts_url=line
        ts_url='https://cdn13.tvtvgood.com/202308/03/ccc19bdb33b6/'+ts_url
        print('请求url：',ts_url)
        tls_list.append(ts_url)
async def get_requests(url):
     async with aiohttp.ClientSession() as req:
          async with await req.get(url=url,headers=headers) as response:
            ts_data = await response.read()
            dic = {'ts_data':ts_data,'ts_title':url.split('/')[-1]}
            return dic

def save_ts_data(t):
    dic = t.result()
    ts_data = dic['ts_data']
    ts_title = dic['ts_title']
    ts_path = dirname + '/' + ts_title
    with open(ts_path,'wb') as fp:
        fp.write(ts_data)
    print(ts_title,'：保存下载成功！')
tasks = []
for url in tls_list:
    c = get_requests(url)
    task = asyncio.ensure_future(c)
    task.add_done_callback(save_ts_data)
    tasks.append(task)

loop = asyncio.get_event_loop()
loop.run_until_complete(asyncio.wait(tasks)) 

</code></pre>
<p>前文我们还提到了线程池，这里也可以试试</p>
<pre><code>import os.path
import requests
import re
import asyncio
import aiohttp
from multiprocessing import Pool
dirname='tlsfile'
if not os.path.exists(dirname):
    os.mkdir(dirname)
headers={
    'User-Agent':'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36'
}
url='https://cdn13.tvtvgood.com/202308/03/ccc19bdb33b6/playlist.m3u8?token=bPDBdBggejAgNQP52VwPOA&amp;expires=1726477655'
response_text=requests.get(url=url,headers=headers).text
print(response_text)
tls_list=[]
for line in response_text.split('\n'):
    if not line.startswith('#'):
        ts_url=line
        ts_url='https://cdn13.tvtvgood.com/202308/03/ccc19bdb33b6/'+ts_url
        print('请求url：',ts_url)
        tls_list.append(ts_url)
def get_reqeust(url):#参数url就是ts片段的请求url
    ts_data = requests.get(url=url,headers=headers,verify=False).content
    ts_path = dirname + '/' + url.split('/')[-1]
    with open(ts_path,'wb') as fp:
        fp.write(ts_data)
    print(ts_path,':保存下载成功！')
#HTTPSConnectionPool异常原因：
    #网络请求的并发量太大（减少并发or在headers中添加一个Connection:closed）
pool = Pool(100)
pool.map(get_reqeust,tls_list)
</code></pre>
<h3 id="selenium">Selenium</h3>
<p>selenium是一种浏览器自动化的工具，所谓的自动化是指，我们可以通过代码的形式制定一系列的行为动作，然后执行代码，这些动作就会同步触发在浏览器中。他是模拟人去打开一个浏览器去进行操作。</p>
<h4 id="环境安装">环境安装</h4>
<ul>
<li>
<p>下载安装selenium：</p>
<ul>
<li>pip install selenium</li>
</ul>
</li>
<li>
<p>下载浏览器驱动程序：</p>
<ul>
<li>http://chromedriver.storage.googleapis.com/index.html</li>
<li>win64选win32即可(根据浏览器版本来选择)</li>
</ul>
</li>
</ul>
<p>对selenium我认为不需要你去从0开始学习他的命令，而是当你有什么需求的时候再去查找相关的命令，针对的使用和学习。所以这里只是简单的举个例子。同时如果使用selenium一定要将浏览器的版本控制住，目前chromdriver最高只能支持到114版本</p>
<pre><code>from selenium import webdriver
from time import sleep
from selenium.webdriver.common.by import By

# 后面是你的浏览器驱动位置，记得前面加r'','r'是防止字符转义的
driver = webdriver.Chrome(executable_path='./chromedriver')
# 用get打开百度页面
driver.get(&quot;http://www.baidu.com&quot;)

# 查找页面的“设置”选项，并进行点击
# driver.find_element_by_xpath('//*[@id=&quot;s-usersetting-top&quot;]').click()
driver.find_element(By.XPATH,'//*[@id=&quot;s-usersetting-top&quot;]').click()


sleep(1)
# # 打开设置后找到“搜索设置”选项，设置为每页显示50条
# driver.find_elements_by_link_text('搜索设置')[0].click()
driver.find_element(By.LINK_TEXT,'搜索设置').click()
sleep(1)

# 选中每页显示50条
m = driver.find_element_by_xpath('//*[@id=&quot;nr_3&quot;]').click()
sleep(1)

# 点击保存设置
driver.find_element_by_xpath('//*[@id=&quot;se-setting-7&quot;]/a[2]').click()
sleep(1)

# 处理弹出的警告页面   确定accept() 和 取消dismiss()
driver.switch_to.alert.accept()
sleep(1)
# 找到百度的输入框，并输入 美女
driver.find_element_by_id('kw').send_keys('美女')
sleep(1)
# 点击搜索按钮
driver.find_element_by_id('su').click()
sleep(1)
driver.find_element_by_xpath('//*[@id=&quot;1&quot;]/div/h3/a').click()
sleep(3)

# 关闭浏览器
driver.quit()
</code></pre>
<h4 id="元素定位"><strong>元素定位</strong></h4>
<p>webdriver 提供了一系列的元素定位方法，常用的有以下几种：</p>
<pre><code>find_element_by_id()  
find_element_by_name()
find_element_by_class_name() 
find_element_by_tag_name()
find_element_by_link_text()
find_element_by_xpath() 
find_element_by_css_selector()

或者
from selenium.webdriver.common.by import By
driver.find_element(By.xxx,value) #返回定位到的标签
driver.find_elements(By.xx, value)  #返回列表
</code></pre>
<h5 id="执行js">执行js</h5>
<p>对于某些操作，Selenium API并没有提供。比如，下拉进度条，它可以直接模拟运行JavaScript，此时使用<code>execute_script()</code>方法即可实现。</p>
<pre><code>from selenium import webdriver
from time import sleep
from selenium.webdriver.common.by import By
#1.创建一个浏览器对象,executable_path指定当前浏览器的驱动程序
#注意：我当前是mac系统，驱动程序也是mac版本的，如果是window系统注意更换驱动
bro = webdriver.Chrome(executable_path='./chromedriver')
#2.浏览器的请求发送
bro.get('https://www.jd.com/')
#3.标签定位:调用find系列的函数进行标签定位
# search_box = bro.find_element_by_xpath('//*[@id=&quot;key&quot;]')
search_box = bro.find_element(By.XPATH,'//*[@id=&quot;key&quot;]')
#4.节点交互
search_box.send_keys('mac pro m1')#向指定标签中录入内容
sleep(2)
# btn = bro.find_element_by_xpath('//*[@id=&quot;search&quot;]/div/div[2]/button')
btn = bro.find_element(By.XPATH,'//*[@id=&quot;search&quot;]/div/div[2]/button')

btn.click() #点击按钮
sleep(2)
#js注入
bro.execute_script('document.documentElement.scrollTo(0,2000)')
sleep(5)
#关闭浏览器
bro.quit()
</code></pre>
<p>selenium能够实现可见即可得，所以正常用户能够看到的selenium都能看到，调用解析，就能获取到。</p>
<h4 id="动作链">动作链</h4>
<p>在上面的实例中，一些交互动作都是针对某个节点执行的。比如，对于输入框，我们就调用它的输入文字和清空文字方法；对于按钮，就调用它的点击方法。其实，还有另外一些操作，它们没有特定的执行对象，比如鼠标拖曳、键盘按键等，这些动作用另一种方式来执行，那就是动作链。</p>
<pre><code>from selenium.webdriver import ActionChains
from selenium import webdriver
from time import sleep
bro = webdriver.Chrome(executable_path='./chromedriver')
bro.get('https://www.runoob.com/try/try.php?filename=jqueryui-api-droppable')
sleep(1)
#注意：如果定位的标签是存在于iframe表示的子页面中，则常规的标签定位报错
#处理：使用如下指定操作
bro.switch_to.frame('iframeResult')
div_tag = bro.find_element_by_id('draggable')

#实例化一个动作链对象且将该对象绑定到指定的浏览器中
action = ActionChains(bro)
action.click_and_hold(div_tag) #对指定标签实现点击且长按操作
for i in range(5):
    action.move_by_offset(10,10).perform() #perform让动作链立即执行
    sleep(0.5)
sleep(3)
bro.quit()

</code></pre>
<h4 id="页面等待">页面等待</h4>
<ul>
<li>
<p>为什么需要等待<br>
如果网站采用了动态html技术，那么页面上的部分元素出现/加载的时间便不能确定，这个时候就可以设置一个等待时间，强制等待指定时间，等待结束之后进行元素定位，如果还是无法定位到则报错</p>
</li>
<li>
<p>页面等待的三种方法</p>
<ul>
<li>
<p>强制等待</p>
<pre><code class="language-python">import time
time.sleep(n)      # 阻塞等待设定的秒数之后再继续往下执行
</code></pre>
</li>
<li>
<p>显式等待</p>
<p>也称为智能等待，针对指定元素定位指定等待时间，在指定时间范围内进行元素查找，找到元素则直接返回，如果在超时还没有找到元素，则抛出异常，显示等待是 selenium 当中比较灵活的一种等待方式，他的实现原理其实是通过 while 循环不停的尝试需要进行的操作。</p>
<pre><code class="language-python">from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

 # 每隔 0.5s 检查一次(默认就是 0.5s), 最多等待 10 秒,否则报错。如果定位到元素则直接结束等待，如果在10秒结束之后仍未定位到元素则报错
 wait = WebDriverWait(chrome, 10,0.5)
 wait.until(EC.presence_of_element_located((By.ID, 'J_goodsList'))) 
</code></pre>
</li>
<li>
<p>隐式等待：</p>
<p>设置超时时间为10秒，使用了implicitlyWait后，如果第一次没有找到元素，会在10秒之内不断循环去找元素，如果超过10秒还没有找到，则抛出异常，隐式等待比较智能。</p>
<pre><code class="language-python">driver.implicitly_wait(10)    # 在指定的n秒内每隔一段时间尝试定位元素，如果n秒结束还未被定位出来则报错
</code></pre>
</li>
</ul>
</li>
</ul>
<h4 id="滑动验证">滑动验证</h4>
<pre><code>import time
from selenium import webdriver
from selenium.webdriver.common.by import By  # 按照什么方式查找，By.ID,By.CSS_SELECTOR
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait  # 等待页面加载某些元素
import cv2 #pip install opencv-python

from urllib import request
from selenium.webdriver.common.action_chains import ActionChains


#获取要滑动的距离
def get_distance():
    #滑动验证码的整体背景图片
    background = cv2.imread(&quot;background.png&quot;, 0)
    #缺口图片
    gap = cv2.imread(&quot;gap.png&quot;, 0)

    res = cv2.matchTemplate(background, gap, cv2.TM_CCOEFF_NORMED)
    value = cv2.minMaxLoc(res)[2][0]
    print(value)
    #单位换算
    return value * 278 / 360


def main():
    chrome = webdriver.Chrome(executable_path='./chromedriver')
    chrome.implicitly_wait(5)

    chrome.get('https://passport.jd.com/new/login.aspx?')

    login = chrome.find_element(By.ID, 'pwd-login')
    login.click()

    loginname = chrome.find_element(By.ID, 'loginname')
    loginname.send_keys(&quot;123@qq.com&quot;)

    nloginpwd = chrome.find_element(By.ID, 'nloginpwd')
    nloginpwd.send_keys(&quot;987654321&quot;)

    loginBtn = chrome.find_element(By.CLASS_NAME, 'login-btn')
    loginBtn.click()
    #带缺口的大图
    img_src = chrome.find_element(By.XPATH, '//*[@class=&quot;JDJRV-bigimg&quot;]/img').get_attribute(&quot;src&quot;)
    #缺口图片
    temp_src = chrome.find_element(By.XPATH, '//*[@class=&quot;JDJRV-smallimg&quot;]/img').get_attribute(&quot;src&quot;)
    #两张图片保存起来
    request.urlretrieve(img_src, &quot;background.png&quot;)
    request.urlretrieve(temp_src, &quot;gap.png&quot;)

    distance = int(get_distance())
    print(&quot;distance:&quot;, distance)

    print('第一步,点击滑动按钮')
    element = chrome.find_element(By.CLASS_NAME, 'JDJRV-slide-btn')
    ActionChains(chrome).click_and_hold(on_element=element).perform()  # 点击鼠标左键，按住不放

    ActionChains(chrome).move_by_offset(xoffset=distance, yoffset=0).perform()
    ActionChains(chrome).release(on_element=element).perform()

    time.sleep(2)
if __name__ == '__main__':
    main()
</code></pre>
<p>验证没有通过原因：</p>
<p>​	没有模拟人的行为动作</p>
<p>​	检测出是selenium</p>
<h4 id="验证码问题">验证码问题</h4>
<ul>
<li>第三方收费验证码模块封装</li>
<li>python自带的cv2模块</li>
</ul>
<h4 id="规避检测重要">规避检测（重要）</h4>
<ul>
<li>
<p>现在不少大网站有对selenium采取了监测机制。比如正常情况下我们用浏览器访问淘宝等网站的 window.navigator.webdriver的值为 undefined或者为false。而使用selenium访问则该值为true。那么如何解决这个问题呢？</p>
<ul>
<li>实现js注入，绕过检测</li>
</ul>
</li>
</ul>
<pre><code>from selenium.webdriver import ActionChains
from selenium.webdriver import Chrome

driver = Chrome('./chromedriver',options=chrome_options)
#Selenium在打开任何页面之前，先运行这个Js文件。
with open('./stealth.min.js') as f:
    js = f.read()
#进行js注入，绕过检测
#execute_cdp_cmd执行cdp命令（在浏览器开发者工具中执行相关指令，完成相关操作）
#Page.addScriptToEvaluateOnNewDocument执行脚本
driver.execute_cdp_cmd(&quot;Page.addScriptToEvaluateOnNewDocument&quot;, {
  &quot;source&quot;: js
})

driver.get('https://www.taobao.com')
</code></pre>
<p>stealth.min.js文件内容较多，就不放在这了</p>
<h3 id="pyppetee">Pyppetee</h3>
<p>那么selenium模拟人的请求，速度相对来说较慢，我们想想能不能也使用上异步呢？这里就引入一个模块pyppeteer</p>
<p>Pyppeteer 就是依赖于 Chromium 这个浏览器来运行的。那么有了 Pyppeteer 之后，我们就可以免去那些繁琐的环境配置等问题。如果第一次运行的时候，Chromium 浏览器没有安装，那么程序会帮我们自动安装和配置，就免去了繁琐的环境配置等工作。另外 Pyppeteer 是基于 Python 的新特性 async 实现的，所以它的一些执行也支持异步操作，效率相对于 Selenium 来说也提高了。</p>
<h4 id="案例爬取httpquotestoscrapecomjs-全部页面数据">案例爬取http://quotes.toscrape.com/js/ 全部页面数据</h4>
<pre><code>import asyncio
from pyppeteer import launch
from lxml import etree

#创建一个特殊的函数
async def main():
    #对应的pyppeteer相关的操作要写在特殊函数内部
    #1.创建一个浏览器对象
    bro = await launch(headless=True)
    #2.创建一个新的page
    page = await bro.newPage()
    #3.发起请求
    await page.goto('http://quotes.toscrape.com/js/')
    #4.获取页面源码数据
    page_text = await page.content()
    #5.数据解析
    tree = etree.HTML(page_text)
    div_list = tree.xpath('//div[@class=&quot;quote&quot;]')
    print(len(div_list))
    await asyncio.sleep(3)
    await bro.close()
#创建一个协程对象
c = main()
#创建且启动事件循环对象
loop = asyncio.get_event_loop()
loop.run_until_complete(c)


</code></pre>
<p>解释：launch 方法会新建一个 Browser 对象，然后赋值给 browser，然后调用 newPage 方法相当于浏览器中新建了一个选项卡，同时新建了一个 Page 对象。然后 Page 对象调用了 goto 方法就相当于在浏览器中输入了这个 URL，浏览器跳转到了对应的页面进行加载，加载完成之后再调用 content 方法，返回当前浏览器页面的源代码。在这个过程中，我们没有配置 Chrome 浏览器，没有配置浏览器驱动，免去了一些繁琐的步骤，同样达到了 Selenium 的效果，还实现了异步抓取</p>
<p>关闭提示条：”Chrome 正受到自动测试软件的控制”，这个提示条有点烦，那咋关闭呢？这时候就需要用到 args 参数了，禁用操作如下：</p>
<pre><code>browser = await launch(headless=False, args=['--disable-infobars'])
</code></pre>
<p>发现页面显示出现了问题，需要手动调用setViewport方法设置显示页面的长宽像素。设置如下：</p>
<pre><code class="language-python">width, height = 1366, 768
</code></pre>
<h4 id="规避检测执行js程序执行指定的js程序">规避检测：执行js程序执行指定的js程序</h4>
<ul>
<li>
<p>正常情况下我们用浏览器访问淘宝等网站的 window.navigator.webdriver的值为 undefined或者为false。而使用pyppeteer访问则该值为true。那么如何解决这个问题呢？</p>
<pre><code class="language-python">import asyncio
from pyppeteer import launch

width, height = 1366, 768

async def main():
    #规避检测
    browser = await launch(headless=False, args=['--disable-infobars'])
    page = await browser.newPage()
    await page.setViewport({'width': width, 'height': height})
    await page.goto('https://login.taobao.com/member/login.jhtml?redirectURL=https://www.taobao.com/')
    
    #规避检测
    await page.evaluate(
        '''() =&gt;{ Object.defineProperties(navigator,{ webdriver:{ get: () =&gt; false } }) }''')
    await asyncio.sleep(20)
    await browser.close()

asyncio.get_event_loop().run_until_complete(main())
</code></pre>
</li>
<li>
<p>节点交互：（可以很好的模拟人的行为）</p>
<ul>
<li>
<pre><code class="language-python">import asyncio
from pyppeteer import launch


async def main():
    # headless参数设为False，则变成有头模式
    browser = await launch(
        headless=False
    )
    page = await browser.newPage()
    # 设置页面视图大小
    await page.setViewport(viewport={'width': 1280, 'height': 800})

    await page.goto('https://www.baidu.com/')
    # 节点交互
    await page.type('#kw', '周杰伦', {'delay': 1000})
    await asyncio.sleep(3)
    #点击搜索按钮
    await page.click('#su')
    await asyncio.sleep(3)
    # 使用选择器选中标签进行点击
    alist = await page.querySelectorAll('.s_tab_inner &gt; a')
    a = alist[3]
    await a.click()
    await asyncio.sleep(3)
    await browser.close()
asyncio.get_event_loop().run_until_complete(main())

</code></pre>
</li>
</ul>
</li>
</ul>
<h4 id="案例爬取异步爬取网易新闻首页的新闻标题">案例爬取：异步爬取网易新闻首页的新闻标题</h4>
<pre><code>#https://news.163.com/domestic/
import asyncio
from pyppeteer import launch
from lxml import etree

#创建一个特殊的函数
async def main():
    #对应的pyppeteer相关的操作要写在特殊函数内部
    #1.创建一个浏览器对象
    bro = await launch(headless=True, executablePath='D:/download/chrome-win/chrome.exe')
    #2.创建一个新的page
    page = await bro.newPage()
    #3.发起请求
    await page.goto('https://news.163.com/domestic/')
    #4.获取页面源码数据
    page_text = await page.content()
    return page_text
    #5.数据解析
def parse(task):
    page_text = task.result()
    tree = etree.HTML(page_text)
    div_list = tree.xpath('//div[@class=&quot;data_row news_article clearfix &quot;]')
    for div in div_list:
        title = div.xpath('.//div[@class=&quot;news_title&quot;]/h3/a/text()')[0]
        print('wangyi:', title)
#创建一个协程对象
tasks = []
task1 = asyncio.ensure_future(main())
task1.add_done_callback(parse)
tasks.append(task1)
asyncio.get_event_loop().run_until_complete(asyncio.wait(tasks))


</code></pre>
<h3 id="scapy">Scapy</h3>
<p>​</p>
<h2 id="参考">参考</h2>
<p><a href="https://www.bazhuayu.com/helpcenter/docs/V2h1Ec">八爪鱼xpath教程</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[github+gridea配置个人博客无法加载main.css问题]]></title>
        <id>https://zj4sun.github.io/post/githubgridea-pei-zhi-ge-ren-bo-ke-wu-fa-jia-zai-maincss-wen-ti/</id>
        <link href="https://zj4sun.github.io/post/githubgridea-pei-zhi-ge-ren-bo-ke-wu-fa-jia-zai-maincss-wen-ti/">
        </link>
        <updated>2024-07-22T04:21:39.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>之前使用博客使用gridea一键搭建的，之前不知道为什么有时候会格式错乱。这里我使用的是自己的绑定的个人域名，访问的时候总是会有格式问题，这里记录下自己的解决方法。</p>
<h2 id="正文">正文</h2>
<p>访问时发现格式错乱，按f12检查一下。发现提示mix content了</p>
<figure data-type="image" tabindex="1"><img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202407221115657.png" alt="image-20240722111531472" loading="lazy"></figure>
<p>我当时想的是格式混用，首先我先去看看了看仓库的文件是否存在http样式的，找遍了几个文件都没有，在网上搜索github page无法加载css的情况，发现都不是我遇到这个问题，这里思路错了，我有看了半天后来发现我这里输入的是https,但是之前根本没有配置证书，所以导致了这个情况，如果此时<strong>换成http是能够正常显示</strong>的但是现在你输入域名浏览器搜索默认都是https的，所以我想把我的域名改成https服务，如果你搜<code>用github搭建自定义域名如何使用https</code>网上的方案有很多，主流的就是使用cloudeflare方案（见参考资料），但是现在也能使用github自带认证。大致流程如下</p>
<pre><code>1获取域名
2配置dns
3配置Github
</code></pre>
<h3 id="获取域名">获取域名</h3>
<p>这里就不展开讲了，国内国外很多平台都可以买域名，结合自己的预算选择一个合适的就行。国内对于域名审核比较严格，需要实名备案，如果不想麻烦可以看看出去看看</p>
<h3 id="配置dns">配置dns</h3>
<p>在你的域名管理界面（如GoDaddy、Cloudflare等），为你的自定义域名添加4条A记录，IP地址分别为185.199.108.153、185.199.109.153、185.199.110.153和185.199.111.153。这里每一个厂商的界面会有细微差异，但是内容应该是一样的</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>名称</th>
<th>值</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td>@</td>
<td>185.199.108.153</td>
</tr>
<tr>
<td>A</td>
<td>@</td>
<td>185.199.109.153</td>
</tr>
<tr>
<td>A</td>
<td>@</td>
<td>185.199.110.153</td>
</tr>
<tr>
<td>A</td>
<td>@</td>
<td>185.199.111.153</td>
</tr>
<tr>
<td>CNAME</td>
<td>www</td>
<td>jasunzhang.github.io</td>
</tr>
</tbody>
</table>
<p>稍等一会等域名解析生效，接下来去 GitHub 配置。</p>
<h3 id="配置github">配置Github</h3>
<p>在custom name填入你注册的域名后 <code>Save</code>，等待几小时生成证书，然后在下边处勾选 <code>Enforce HTTPS</code>。网上很多教程都提示需要配哦之cname，但是我这里他自动生成了（应该是gridea生成的）</p>
<figure data-type="image" tabindex="2"><img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202407221113449.png" alt="" loading="lazy"></figure>
<p>接下来就是等待github给我们申请了。</p>
<figure data-type="image" tabindex="3"><img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202407221136111.png" alt="image-20240722113619077" loading="lazy"></figure>
<p>等它加载完成以为一切都好了，结果是输入发现还是有一个css文件未加载（这里按理说应该不会出现这种情况，可以弄好了之后把cookie清理下）</p>
<figure data-type="image" tabindex="4"><img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202407221144776.png" alt="image-20240722114420563" loading="lazy"></figure>
<p>如果清理后还是有这个情况，可以试试这个方案</p>
<p>（在index.html的head中加入以下代码）</p>
<pre><code>&lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;upgrade-insecure-requests&quot; /&gt;
</code></pre>
<p>加入该标签的原理是使用META标签强制将http请求转成https(SSL协议)请求(这里不知道一开始就修改能不能行)</p>
<figure data-type="image" tabindex="5"><img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202407221147816.png" alt="image-20240722114719747" loading="lazy"></figure>
<p>ok正常了</p>
<h2 id="参考资料">参考资料</h2>
<p><a href="https://tzhou2018.github.io/2018/04/%E4%B8%BAGitHub-Pages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%B9%B6%E6%B7%BB%E5%8A%A0SSL-%E5%BC%80%E5%90%AFHTTPS%E5%BC%BA%E5%88%B6/">为GitHub Pages自定义域名并添加SSL-开启https强制</a></p>
<p><a href="https://io-oi.me/tech/custom-domains-on-github-pages/">GitHub Pages 绑定个人域名，免 Cloudflare 支持 HTTPS</a></p>
<p><a href="https://blog.csdn.net/qq_41287158/article/details/125186830">解决Mixed Content: The page at ‘https://xxxx‘ was loaded over HTTPS..</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2024年第二季度总结]]></title>
        <id>https://zj4sun.github.io/post/2024-nian-di-er-ji-du-zong-jie/</id>
        <link href="https://zj4sun.github.io/post/2024-nian-di-er-ji-du-zong-jie/">
        </link>
        <updated>2024-06-30T05:50:18.000Z</updated>
        <content type="html"><![CDATA[<h2 id="4月">4月</h2>
<h3 id="所遇皆是良人">所遇皆是良人</h3>
<p>四月第一天，我也迎来了人生的第一次正式面试，因为自己准备的问题，面试效果很不好，和white师傅交流了一下。本来打算自己听语音复盘，但是white师傅主动打来电话，和我复盘，white技术和经验领先我太多，给我认仔细的分析了面试问题内容，同时又给我分享了很多经验和资料。对于我的简历，又提出了非常详细的资料，非常感激能够遇到这样朋友！</p>
<figure data-type="image" tabindex="1"><img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202404021431512.png" alt="image-20240402143152373" loading="lazy"></figure>
<h3 id="没有天生合适的两个人-只有彼此迁就的两颗心">没有天生合适的两个人。只有彼此迁就的两颗心</h3>
<p>看到这个话，也发现了恋爱不是一个人的独角戏，而是两个人的共舞</p>
<h3 id="标签">标签</h3>
<figure data-type="image" tabindex="2"><img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202404082058601.png" alt="image-20240408205812443" loading="lazy"></figure>
<p>最近因为加了很多中介，所以尝试用标签来对生活进行分组。突然有一种感觉我们都是生活在各种标签下</p>
<h3 id="隐私大爆炸">隐私大爆炸</h3>
<p>在这样混乱的互联网上，军阀割据的地盘中，你根本身不由己，当你接入互联网或陌生人的那一刻，你的隐私就失控了。拿到你隐私的坏蛋，他们可以偷窥你，可以诈骗你或你身边的人，可以利用你的隐私做出下三滥的事。他们不会可怜你，你得学几招保护自己，保护你重要的人……</p>
<p><strong>安全和用户体验一定要达到一种平衡。不要被安全恐吓住而矫情说：「那我什么都不用了……」这是多么傻的决定啊，平时保持安全好习惯并不会影响用户体验。</strong></p>
<h3 id="关于恋爱">关于恋爱</h3>
<p>看到两个不错关于恋爱的观点，记录一下</p>
<ul>
<li>冲动的爱情，并不适合所有的人，她最考验两个人的真心，但如果相遇在正确的时间正确的地点，对于同频共振的两个人，时间从来不是问题关键</li>
<li>在新鲜感满满的热恋期，你无法看到对方对你的付出和真心是来自ta的本性还是刚开始恋爱上头时的新鲜感。只有当新鲜感褪去，我才能判断他是真正是怎样为人处世的。每个阶段都有不一样的风景。</li>
</ul>
<h3 id="泪之女王">泪之女王</h3>
<figure data-type="image" tabindex="3"><img src="https://p6-sign.douyinpic.com/tos-cn-i-p14lwwcsbr/b2d9612c4e084c618a36efe601f9e456~tplv-p14lwwcsbr-7.image?x-expires=1714410000&amp;x-signature=EiSMJ93McKxzftMJurAwgG3SEZo%3D&amp;from=2064092626&amp;se=false&amp;sc=image&amp;biz_tag=aweme_comment&amp;l=202404291922388545D9AB5062480CDC15" alt="img" loading="lazy"></figure>
<p>3月底到4月这个时间追了一部韩剧，一部剧情讲述一对结婚三年、女强男弱的财阀夫妻，因不对频的生活使婚姻遭遇危机，在克服困境后两人的爱情如奇迹般再次绽放的故事。本部的剧情其实认为比较平庸，没有给我一种惊艳的感觉，可能让我能够持续一个月（每周末更新两集）的追的原因估计是男女主的颜和她里面我比较认可的观点吧。一些句子也让我有所收获，这部剧中男女的恋爱观。对于爱情的专一，执着深情，令我感到深深的敬意，我不确定我未来会变成什么样的人，但是起码现在，我要的是先来一场轰轰烈烈的恋爱，再去结婚。我不希望两个并不熟悉的人就简单的在一起一直过下去，这不是我想的爱情，也不是我想要的未来。我希望我以后也能在结婚的时候，也能记录下，一段视频，对十年后的自己的话。正如我20岁所写的那样我的十年。我想关于爱情，也会有那么多值得去说的吧，最后大胆的爱身边的人，即使有磕绊也请相信爱情，不要留遗憾，要沟通，就一定会像贤佑海寅一样爱到最后的。</p>
<p>摘录台词：</p>
<ul>
<li>或者就是因为有那些美好的记忆作为燃料让我得以运作，所以那些记忆造就了我，还有我的人生。既然我作为我活着，那么我也要作为我死去。</li>
<li>你以为你都忘记了，但是身体的肌肉会记得，爱也是这样，你以为你都忘记了，但是哪一天要去爱。你的心会记得</li>
<li>当你处在暗处的时候连影子都会离开你，这就是权力的尽头</li>
<li>父亲是家里的支柱，你要坚强，孩子们才会跟坚强，不论父母有没有出息，对孩子来说都是像灯塔一样。</li>
<li>人就应该始终如一，不要因为快死了，就去做之前不会做的事</li>
</ul>
<h3 id="准备毕业">准备毕业</h3>
<p>五一放假前夕，学校安排了毕业生图像采集，标志我正式开始了毕业生的流程，时间飞快，转眼间那些大二知道我们学长，已经站在讲台上开始答辩，而我们也开始了头像采集。无忧无虑的大学时光总是短暂，在学校的三年时光，有着许多美好的记忆，我想待到明年这个时候我或许有着更多想要去讲述去叙说的吧。</p>
<figure data-type="image" tabindex="4"><img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202404301345296.png" alt="image-20240430134535245" loading="lazy"></figure>
<h2 id="5月">5月</h2>
<h3 id="山城">山城</h3>
<p>5.1假期和舍友一起去重庆了，这也是我第一次出省（行政意义上的）玩。其实我一直都想去不同的城市去看看一看，开拓一下自己的眼界，也很幸运有一群室友能够和我一块。当然这次选择重庆也算是比较好运，在三月，家门口的车站开了直达重庆的动车，使得我们可以非常方便的到达重庆。在到达重庆之前，一直就听说重庆是一个立体城市，你以为你在1楼实际你在10楼，我在这之前一直都是抱着怀疑的态度的，我认为这个是能够看出明显的区别的，可当我们在大街上走着走着，看到一个门进去，发现电梯显示居然在10楼！</p>
<p>复杂的地形，导致我们的citywalk一直都是爬楼梯上坡，下楼梯下坡，走的平路了屈指可数。我们主要去的地方是渝中和渝北。渝中区感觉聚集了重庆80%的景点，而且重庆景点很好的一点就是他的很多景点都不收门票，同时还有很多网络打卡点。同时轨道交通的价格，整体氛围，我认为是一个非常适合旅行的城市。重庆文旅上大分。就像我们走在一个很普通的街区，一个很普通的楼梯（其实也不普通它特别的长），他都有涂鸦来装饰点缀。</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202405081719026.png" alt="image-20240508171915064" style="zoom:10%;" />
<p>在重庆用导航得眼观六路，你以为前面没有路，其实有一个小路口子可以进去，可能因为建筑群密集的原因，好几次导航都定错位置，这个以前在我们老家农村都没有的情况。</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202405081719742.png" alt="image-20240508171900790" style="zoom:10%;" />
<p>重庆爆火景点解放碑，周边算是重庆主城热门景点，人流量巨大，也特别繁华，高耸的建筑，丰富的夜景灯光，拥挤的人群。无不显示着这座城市的火热。</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202405081712628.png" alt="image-20240508171213810" style="zoom:10%;" />
<p>到重庆了一天晚上我们选择了通宵了打麻将来度过一晚上，凌晨四点，麻将时间结束，就趴在桌子躺在椅子上开始睡觉。21岁的我们或许是面对那高昂的酒店望而却步，但是我觉得我们是年轻的，我们可以选择别的方式去度过，去重庆的这几天，花销最小就是住宿，三天晚上只花了不到50块（打麻将把茶钱赢回来了约等于没花钱）</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202405081711311.png" alt="image-20240508171123539" style="zoom:10%;" />
<p>这次去重庆其实还是有蛮多感触了，特别是在回学校的路上，听到了毛不易的一程山路，想起最近流行的”县城文学“。歌词中“走不出，看不破，潺潺流水终于穿过了青山一座座”，站在父母的肩膀上，我从一座座大山中走了出来了，我见到了远处的繁华，可我时常想起家乡的种种。心中的差距越发的大，多年的地级市，居然还没有属于自己的高铁，大量的人不能不远离家乡，远离熟悉的地方，去陌生的城市发展，家乡不能供养肉身，他乡不能休养灵魂。但是我也能见识到家乡的发展，我的家乡他还在努力一步一步的发展，从家门口的水泥路变成沥青路，原先的烂尾楼变成了城市新地标。我想这是无数家乡父老乡亲的努力。共勉！</p>
<h3 id="还能再战">还能再战</h3>
<p>3月份我第一次拆了自己的电脑，当时因为没有硅脂，只是简单的清了电脑的风扇的灰尘，就没继续了，昨天发现了有朋友买了硅脂和相变片，交流后发现还有多余，就想着给它来一次彻底的清灰，因为有过上次拆机经验，这次拆机很迅速，换硅脂贴相变片也很顺手。每次细致观看电脑内部，无不感叹，他的神奇，从一个简单的逻辑10电路，到现在能够在图形化的处理各种的复杂运算，而体积只有这么点大。真就是人类智慧的结晶。</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202405081710012.png" alt="image-20240508171034022" style="zoom:10%;" />
<h3 id="小酌">小酌</h3>
<p>王总近期从西安回到了成都，这天下班了，给我门带了点宵夜回来，刚好我们崔先生屯了点啤酒，于是回来之后支好桌子开始小酌，期间畅谈近日生活体验，恍惚间发现自己离毕业已经不远了，近期得确定好了实习方向了。</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202405122313483.png" alt="image-20240512231332122" style="zoom:10%;" />
<h3 id="不要留下遗憾">不要留下遗憾</h3>
<p>最近和家里人打电话时，得知婆婆近期病情恶化，已经不能吃东西，连夜赶回去。一路狂奔花了6个小时到了亲戚家，应为婆婆在山上，第一晚现在山下住了一晚。第二天赶一早上山去看望。</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202405201012416.png" alt="image-20240520101252871" style="zoom:10%;" />
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202405201012548.png" alt="image-20240520101214004" style="zoom:10%;" />
<p>已经很久没有在老家待到晚上了，这一天看到家乡的夕阳和天空。在回老家的两天里，甚至包含了一位老中医，摸其寿脉，只有几个月的日子的时候，我都没有什么巨大的波动，可是在回学校的路上，看到车窗里倒退的大山，不禁想起李密的陈情表，臣无祖母，无以至今日，婆婆陪伴了我成长的大部分的时光。回想过去的种种，我不知为何，再也无法控制。婆婆总说自己很焦虑，自己一直生病，自己的孙子还未成家还未找到工作，我们总是说这不是你需要的担心的事，而应答。可是这好像丝毫不能缓解他的忧愁，其实自我记事以来，并未过多的见到亲人离世，去年一位很尊敬的姨父突发疾病意外走了，也是让我第一次让我明白了失去。今年得知这个消息，可我仿佛并没有做好准备，之前总是在劝慰别人死亡是每一个人必须要面对的话题。可是，但一个鲜活的生命真真切切的消失在你的面前，当一位十分可亲敬重的亲人离你远去。如何能接受？我想这种巨大的悲痛，没有人能够是每一个人必须要经历和面对的吧。作为一个坚定的唯物主义者，我又多么想要此时能够有神明庇护，能够让她多活几年，等到我做好了准备，等到她所担心的所有事情都能够解决。所以啊，不要留下遗憾，好好珍惜和亲人在一起的每一个时刻，好好的爱每一个爱你的人，不要总是以为来日方长，你永远不知道明天和意外谁先到来，当意外来临时，希望我，也希望大家做好了准备！</p>
<h3 id="历史的重量">历史的重量</h3>
<p>最近不经意看到一个视频，历史中有没有几个字的记载，时间却可以达到惊天地泣鬼神。我们无法衡量当前事物的价值直到这一刻成为永远，之前我们总是不能够切身体会，可是当我们切身经历。我们不经感叹。短短的几句话，就是无数人的一生。</p>
<blockquote>
<p>2020年伊始我国坚持人抗击疫情人民战争新冠肺炎疫情突如大限度保护了，人民至上统筹疫情防控和经济社会发展取得重大积生命至上极成果，人民生命安全和身体健康总体战生忘死、铸就了生命至上阻击战开精神，尊重科学、命运与共的伟大抗疫举国同心</p>
</blockquote>
<p>现在回看当时不经感叹之前的啊，封城啊，测核酸呐，仿佛就在昨天，又仿佛像做了一场梦！可是现实，那些真真实实的记忆，却又不是梦！</p>
<h2 id="6月">6月</h2>
<p>不知不觉已经到了六月，新建这个部分都是6号了，前面几天一直在准备几场实习面试，导致都没有分配很多时间来写这个。今天刚好有时间，来写写</p>
<h3 id="守护世界和平">守护世界和平！</h3>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202406061637619.png" alt="image-20240606163758794" style="zoom:10%;" />
<p>1号是六一儿童节，这天和室友去大融城里面玩了一圈，在商场看到了这个铠甲勇士的表演，现场是几个穿着皮衣的的扮演者在实地表演，刚开始我认为这是一件很尬的事情，可是不是不觉我就站着把他看完了。现场大多数都是小朋友和陪小朋友的家长，但是细细发现不难看出也有和我一样的同龄人。已经有很多年不曾对这个节日有过关注，上次和应该还是小学参加汇演，最近一直忙着暑期实习的事情，一直没有好好的放松一下，这次看到这个心里蛮感慨的，一路走来，从最开始的懵不知事，到现在认识到自己的责任，并主动去承担，现在想想也就是那么几年，有时感觉人的成熟是突然之间，有时又是一直在成长。其实我认为成熟是将内心的其他给隐藏，所以如果你问我的你的梦想，我可能会有很多回答，但是守护世界和平一定会是在我内心中出现的</p>
<h3 id="一些小惊喜">一些小惊喜？</h3>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202406061701940.png" alt="image-20240606170105349" style="zoom:10%;" />
<p>这天收到投喂，哈哈哈想不到我这种xds也能收到投喂，这两天收到创宇的offer，思考了一下，最后还是决定接了，虽然后续要base在北京，年轻嘛，我一直觉得，就该出去看看吧，去看看这个地方到底是什么样的。在准备去成都准备入职资料的回来的时候，看到食堂边的栀子花开了，一般很少排花，一直认为花应当分享给对的人，最近我好像发现了一个可能对的人。emmm不太确定，多接触接触接触吧。但是希望是一个对的人！</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202406061725103.png" alt="image-20240606172511254" style="zoom:10%;" />
<h3 id="美滋滋">美滋滋</h3>
<blockquote>
<p>落花时节又逢君</p>
</blockquote>
<p>最近，我发现一个我的宝藏了，一个内敛，但是敢于勇敢的迈出第一步的人！我认为不论结果如何，我想我会永远记住这一段时间，记住这段被喜欢着的日子！</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202406082339535.png" alt="image-20240608233907663" style="zoom:10%;" />
<h3 id="卡布奇洛">卡布奇洛</h3>
<p>勇敢的迈出了这一步了，经过几天的交流和思想碰撞之后，我认为她就是我要找的伴侣了，勇敢，知性，有思想，有内涵，仿佛可以想出很多的有点来形容她，正如我在去年12月提到的那样，在认真了解然后坚定你的选择，认定TA就是最好的那一个。那么此时我想我已经找到了答案，我想我会开始频繁的记录者她，记录着我们相爱的日子。</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202406141121956.png" alt="image-20240614112113732" style="zoom:35%;" />
<h3 id="狂飙">狂飙</h3>
<p>学校和实习公司距离太远了，每天需要踩着点赶上最早的一班高铁，这天晚起来了几分钟，王总说感觉走路可能有点赶，于是扫上小桔开始狂飙！</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202406141132916.png" alt="image-20240614113211770" style="zoom:10%;" />
<h3 id="分别">分别</h3>
<p>真正的离别没有长亭古道，可能就是 在一个平常的午后，悄悄地很多人就是再也见不到了。临近分别大家对于未来有着自己的计划和安排，有的继续深造，有的远走他乡，有的正在寻找方向。我想最后这一场饭便是我们对于大学同窗时代的总结，这不是我们青春的结束，这是我们未来的开始，也许多年后的某一刻，脑海中会突然恍惚出现和这些朋友饮酒作乐的悠闲时光。劝君更进一杯酒，西出阳关无故人呐！</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202406301932702.png" alt="image-20240630193258012" style="zoom:10%;" />
<h3 id="北京北京">北京北京！</h3>
<blockquote>
<p>每一个程序员都应该有一个北上广的梦想</p>
</blockquote>
<p>几经转折，我来到这个我曾经向往已久的大都市，我来到北京完全是出于偶然，在22年看到一个程序员博主分析了他过往，和他一样，对于未来我充满着向往，听到他描述的北京，突然对于北京这个地方一直有一种向往。寻找暑期实习的时候，我开始四处投递简历，无意间投到了北京那边了，当我的面试官也是我的leader面试的时候问我，能否接受北京时，我很自信的说，每一个年轻人都应该有一个出去看看的心，我想去看看！我才20多岁，我不确定我未来会受什么牵制，但是现在的我能够放开自己的手脚，去见识广阔的天空，我可能很快会回来，但是我想去体验那一段生活，去感受一个人背井离乡，去上班去奋斗的生活。谈起北漂心中总有一种悲壮的情绪，以前的我并没有太深的感触，但是当我真正的走在路上，当天转了三趟车，飞机+高铁+地铁，白天浩浩荡荡的赶路，晚上一切尘埃落定后，一个在小小的出租屋里面还是有一种莫名的凄凉。不知归途在何方，但初来北京的我可以说什么都没有，也不怕失去什么，那么希望我离开的时候能够比现在更好，更丰盈！</p>
<img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202406301933956.png" alt="image-20240630193306058" style="zoom:10%;" />]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[玄机靶场-apcahe日志分析]]></title>
        <id>https://zj4sun.github.io/post/xuan-ji-ba-chang-apcahe-ri-zhi-fen-xi/</id>
        <link href="https://zj4sun.github.io/post/xuan-ji-ba-chang-apcahe-ri-zhi-fen-xi/">
        </link>
        <updated>2024-05-22T04:32:42.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>今天主要记录的是玄机靶场第二章apache日志分析，主要内容是日志分析。以下是题目要求</p>
<pre><code>账号密码 root apacherizhi
ssh root@IP
1、提交当天访问次数最多的IP，即黑客IP：
2、黑客使用的浏览器指纹是什么，提交指纹的md5：
3、查看index.php页面被访问的次数，提交次数：
4、查看黑客IP访问了多少次，提交次数：
5、查看2023年8月03日8时这一个小时内有多少IP访问，提交次数:
</code></pre>
<p>先用xshell连一下。</p>
<h2 id="正文">正文</h2>
<p>首先我们要查看访问最多的ip我们得打开apche日志才行</p>
<p>apache日志位置/var/log/apache2/,我们需要先进入</p>
<pre><code>cut -d- -f 1 access.log.1|uniq -c | sort -rn | head -20
</code></pre>
<p><strong><img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202405082043082.png" alt="image-20240508204307992" loading="lazy"></strong></p>
<p><code>flag{192.168.200.2}</code></p>
<pre><code>cat access.log.1 |grep &quot;192.168.200.2&quot;
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202405082044293.png" alt="image-20240508204413266" loading="lazy"></figure>
<p>发现瞟了都一样，没有变动，就拿去加密提交</p>
<figure data-type="image" tabindex="2"><img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202405082045822.png" alt="image-20240508204534784" loading="lazy"></figure>
<p><code>flag{2d6330f380f44ac20f3a02eed0958f66}</code></p>
<pre><code>grep &quot;/index.php&quot; access.log.1 |wc -l
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202405082046514.png" alt="image-20240508204653493" loading="lazy"></figure>
<p><code>flag{27}</code></p>
<pre><code>cat access.log.1 | grep &quot;192.168.200.2 - -&quot;  | wc -l
</code></pre>
<p><code>wc -l</code>命令用于计算匹配到的行数，即特定IP地址出现的次数。</p>
<pre><code>grep &quot;192.168.200.2&quot; access.log.1 | cut -d' ' -f1 | sort | uniq -c
</code></pre>
<p>这个命令首先使用grep过滤出包含&quot;黑客IP&quot;的行，然后使用cut命令提取出每行的第一个字段（即IP地址部分），接着使用sort对IP地址进行排序，最后使用uniq -c来统计每个不同的IP地址出现的次数。</p>
<figure data-type="image" tabindex="4"><img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202405082101653.png" alt="image-20240508210127637" loading="lazy"></figure>
<p><code>flag{6555}</code></p>
<pre><code>cat access.log.1 | grep &quot;03/Aug/2023:08:&quot; | awk '{print $1}' | sort -nr| uniq -c |wc -l
</code></pre>
<figure data-type="image" tabindex="5"><img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202405082057089.png" alt="image-20240508205754062" loading="lazy"></figure>
<p>每一行的格式是&quot;访问次数 IP地址&quot;。其中<code>::1</code>：这个IP地址对应的是本地主机，通常用于IPv6环回地址，表示本机。</p>
<p><code>flag{5}</code></p>
<h2 id="总结">总结</h2>
<p>我们不妨对一些可能出现的高频日志分析的语句进行整理</p>
<ol>
<li><strong>统计访问量最高的IP地址</strong>：</li>
</ol>
<pre><code>cat access.log | awk '{print $1}' | sort | uniq -c | sort -nr | head -n 10
</code></pre>
<ol>
<li><strong>查找特定时间范围内的访问量</strong>：</li>
</ol>
<pre><code>grep &quot;03/Aug/2023:08:&quot; access.log | wc -l
</code></pre>
<ol>
<li><strong>统计每个HTTP状态码的数量</strong>：</li>
</ol>
<pre><code>awk '{print $9}' access.log | sort | uniq -c
</code></pre>
<ol>
<li><strong>查找出现频率最高的URL路径</strong>：</li>
</ol>
<pre><code>awk '{print $7}' access.log | sort | uniq -c | sort -nr | head -n 10
</code></pre>
<ol>
<li><strong>统计每个用户的访问量</strong>（假设用户信息在第八列）：</li>
</ol>
<pre><code>awk '{print $8}' access.log | sort | uniq -c | sort -nr
</code></pre>
<ol>
<li><strong>查找特定用户的访问记录</strong>（假设用户信息在第八列）：</li>
</ol>
<pre><code>grep &quot;username&quot; access.log
</code></pre>
<ol>
<li><strong>统计每个时间段的访问量</strong>（假设时间信息在第四列）：</li>
</ol>
<pre><code>awk '{print substr($4, 14, 5)}' access.log | sort | uniq -c
</code></pre>
<ol>
<li><strong>查找特定URL被访问的次数</strong>：</li>
</ol>
<pre><code>grep &quot;specific_url&quot; access.log | wc -l
</code></pre>
<p>这里用到了awk，AWK是一种用于文本处理的编程语言，通常用于逐行处理文本数据。<code>awk '{print $1}'</code>: 这部分使用<code>awk</code>命令提取每行的第一个字段（即IP地址部分）。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[玄机靶场-Linux日志分析]]></title>
        <id>https://zj4sun.github.io/post/xuan-ji-ba-chang-linux-ri-zhi-fen-xi/</id>
        <link href="https://zj4sun.github.io/post/xuan-ji-ba-chang-linux-ri-zhi-fen-xi/">
        </link>
        <updated>2024-05-21T04:30:48.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>今天来继续来玄机靶场的Linux日志分析，再开始前先整理下日志分析一般会用到的语句</p>
<pre><code>Linux系统中常见的日志文件包括：
/var/log/syslog           检查最近的系统活动
/var/log/auth.log（或/var/log/secure）检查登录和认证日志
/var/log/messages           检查系统启动和服务日志 
/var/log/dmesg               分析内核消息
/var/log/kern.log              检查计划任务
/var/log/daemon.log           检查用户和组的变更
</code></pre>
<p>在实战中一般还需要结合安全设备的报错综合来分析，我们先来本次任务看看那些要求</p>
<pre><code>1.有多少IP在爆破主机ssh的root帐号，如果有多个使用&quot;,&quot;分割
2.ssh爆破成功登陆的IP是多少，如果有多个使用&quot;,&quot;分割
3.爆破用户名字典是什么？如果有多个使用&quot;,&quot;分割
4.登陆成功的IP共爆破了多少次
5.黑客登陆主机后新建了一个后门用户，用户名是多少
</code></pre>
<h2 id="正文">正文</h2>
<pre><code>cat /var/log/auth.log.1 | less
</code></pre>
<p>确认日志格式和成功登录条目的具体字段位置</p>
<figure data-type="image" tabindex="1"><img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202405221444720.png" alt="image-20240522144438633" loading="lazy"></figure>
<p>我们是可以看到ip在第11位</p>
<p>1.有多少IP在爆破主机ssh的root帐号，如果有多个使用&quot;,&quot;分割 小到大排序 例如flag{192.168.200.1,192.168.200.2}</p>
<pre><code>cat /var/log/auth.log.1 | grep -a &quot;Accepted &quot; | awk '{print $11}' | sort | uniq -c | sort -nr | more
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202405221425561.png" alt="image-20240522142559499" loading="lazy"></figure>
<p>2.ssh爆破成功登陆的IP是多少，如果有多个使用&quot;,&quot;分割</p>
<pre><code>cat /var/log/auth.log.1 | grep -a &quot;Accepted &quot; | awk '{print $11}' | sort | uniq -c | sort -nr | more
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202405221440511.png" alt="image-20240522142723574" loading="lazy"></figure>
<p>3.爆破用户名字典是什么？如果有多个使用&quot;,&quot;分割</p>
<pre><code>cat /var/log/auth.log.1 | grep -a &quot;Failed password&quot; | perl -e 'while($_=&lt;&gt;){ /for(.*?) from/; print &quot;$1\n&quot;;}' | uniq -c | sort -nr
</code></pre>
<p><strong><code>perl -e 'while($_=&lt;&gt;){ /for(.\*?) from/; print &quot;$1\n&quot;;}'</code></strong>:</p>
<ul>
<li>这部分使用Perl脚本来进一步处理过滤后的日志行。具体解释如下：
<ul>
<li><code>while($_=&lt;&gt;){ ... }</code>：逐行读取输入。</li>
<li><code>/for(.*?) from/</code>：使用正则表达式匹配“for ... from”模式，并捕获“for”和“from”之间的内容。可以看看上面原始日志的内容对比以下就能理解</li>
<li><code>print &quot;$1\n&quot;;</code>：打印捕获的内容（即用户名）。</li>
</ul>
</li>
</ul>
<figure data-type="image" tabindex="4"><img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202405221450191.png" alt="image-20240522145025126" loading="lazy"></figure>
<p>4.成功登录 root 用户的 ip 一共爆破了多少次</p>
<p>直接看第一个</p>
<p>5.黑客登陆主机后新建了一个后门用户，用户名是多少</p>
<p>我们可以用这个指令也可以直接看passwd</p>
<pre><code>cat /var/log/auth.log.1 |grep -a &quot;new user&quot;
or
cat /etc/passwd
</code></pre>
<figure data-type="image" tabindex="5"><img src="https://jasun-1321731794.cos.ap-chengdu.myqcloud.com/pic/202405221431626.png" alt="image-20240522143144516" loading="lazy"></figure>
<h2 id="总结">总结</h2>
<p>这一部分我们主要分析的是与登录相关的日志auth.log.1 ,常见的语法还是那些,但是今天还学到了**<code>perl -e 'while($_=&lt;&gt;){ /for(.\*?) from/; print &quot;$1\n&quot;;}'</code>**:来处理日志</p>
]]></content>
    </entry>
</feed>